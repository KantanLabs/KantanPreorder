#line 2 "second-stage/programs/features/read-tree.cc"

#line 4 "second-stage/programs/features/read-tree.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer readtree_create_buffer
#define yy_delete_buffer readtree_delete_buffer
#define yy_flex_debug readtree_flex_debug
#define yy_init_buffer readtree_init_buffer
#define yy_flush_buffer readtree_flush_buffer
#define yy_load_buffer_state readtree_load_buffer_state
#define yy_switch_to_buffer readtree_switch_to_buffer
#define yyin readtreein
#define yyleng readtreeleng
#define yylex readtreelex
#define yylineno readtreelineno
#define yyout readtreeout
#define yyrestart readtreerestart
#define yytext readtreetext
#define yywrap readtreewrap
#define yyalloc readtreealloc
#define yyrealloc readtreerealloc
#define yyfree readtreefree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE readtreerestart(readtreein  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int readtreeleng;

extern FILE *readtreein, *readtreeout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up readtreetext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up readtreetext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via readtreerestart()), so that the user can continue scanning by
	 * just pointing readtreein at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when readtreetext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int readtreeleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow readtreewrap()'s to do buffer switches
 * instead of setting up a fresh readtreein.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void readtreerestart (FILE *input_file  );
void readtree_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE readtree_create_buffer (FILE *file,int size  );
void readtree_delete_buffer (YY_BUFFER_STATE b  );
void readtree_flush_buffer (YY_BUFFER_STATE b  );
void readtreepush_buffer_state (YY_BUFFER_STATE new_buffer  );
void readtreepop_buffer_state (void );

static void readtreeensure_buffer_stack (void );
static void readtree_load_buffer_state (void );
static void readtree_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER readtree_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE readtree_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE readtree_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE readtree_scan_bytes (yyconst char *bytes,int len  );

void *readtreealloc (yy_size_t  );
void *readtreerealloc (void *,yy_size_t  );
void readtreefree (void *  );

#define yy_new_buffer readtree_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        readtreeensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            readtree_create_buffer(readtreein,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        readtreeensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            readtree_create_buffer(readtreein,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define readtreewrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *readtreein = (FILE *) 0, *readtreeout = (FILE *) 0;

typedef yyconst struct yy_trans_info *yy_state_type;

extern int readtreelineno;

int readtreelineno = 1;

extern char *readtreetext;
#define yytext_ptr readtreetext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up readtreetext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	readtreeleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 18
#define YY_END_OF_BUFFER 19
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[10076] =
    {
 {   0,   0 }, {   0,9820 }, {   0,   0 }, {   0,9818 }, {   1,4128 },
 {   2,4128 }, {   3,4128 }, {   4,4128 }, {   5,4128 }, {   6,4128 },
 {   7,4128 }, {   8,4128 }, {   9,4130 }, {  10,4132 }, {  11,4128 },
 {  12,4128 }, {  13,4128 }, {  14,4128 }, {  15,4128 }, {  16,4128 },
 {  17,4128 }, {  18,4128 }, {  19,4128 }, {  20,4128 }, {  21,4128 },
 {  22,4128 }, {  23,4128 }, {  24,4128 }, {  25,4128 }, {  26,4128 },
 {  27,4128 }, {  28,4128 }, {  29,4128 }, {  30,4128 }, {  31,4128 },
 {  32,4130 }, {  33,4128 }, {  34,4128 }, {  35,4128 }, {  36,4128 },
 {  37,4128 }, {  38,4128 }, {  39,4128 }, {  40,4128 }, {  41,4128 },
 {  42,4128 }, {  43,4128 }, {  44,4128 }, {  45,4128 }, {  46,4128 },

 {  47,4128 }, {  48,4128 }, {  49,4128 }, {  50,4128 }, {  51,4128 },
 {  52,4128 }, {  53,4128 }, {  54,4128 }, {  55,4128 }, {  56,4128 },
 {  57,4128 }, {  58,4128 }, {  59,4128 }, {  60,4128 }, {  61,4128 },
 {  62,4128 }, {  63,4128 }, {  64,4128 }, {  65,4128 }, {  66,4128 },
 {  67,4128 }, {  68,4128 }, {  69,4128 }, {  70,4128 }, {  71,4128 },
 {  72,4128 }, {  73,4128 }, {  74,4128 }, {  75,4128 }, {  76,4128 },
 {  77,4128 }, {  78,4128 }, {  79,4128 }, {  80,4128 }, {  81,4128 },
 {  82,4128 }, {  83,4128 }, {  84,4128 }, {  85,4128 }, {  86,4128 },
 {  87,4128 }, {  88,4128 }, {  89,4128 }, {  90,4128 }, {  91,4128 },
 {  92,4128 }, {  93,4128 }, {  94,4128 }, {  95,4128 }, {  96,4128 },

 {  97,4128 }, {  98,4128 }, {  99,4128 }, { 100,4128 }, { 101,4128 },
 { 102,4128 }, { 103,4128 }, { 104,4128 }, { 105,4128 }, { 106,4128 },
 { 107,4128 }, { 108,4128 }, { 109,4128 }, { 110,4128 }, { 111,4128 },
 { 112,4128 }, { 113,4128 }, { 114,4128 }, { 115,4128 }, { 116,4128 },
 { 117,4128 }, { 118,4128 }, { 119,4128 }, { 120,4128 }, { 121,4128 },
 { 122,4128 }, { 123,4128 }, { 124,4128 }, { 125,4128 }, { 126,4128 },
 { 127,4128 }, { 128,4128 }, { 129,4128 }, { 130,4128 }, { 131,4128 },
 { 132,4128 }, { 133,4128 }, { 134,4128 }, { 135,4128 }, { 136,4128 },
 { 137,4128 }, { 138,4128 }, { 139,4128 }, { 140,4128 }, { 141,4128 },
 { 142,4128 }, { 143,4128 }, { 144,4128 }, { 145,4128 }, { 146,4128 },

 { 147,4128 }, { 148,4128 }, { 149,4128 }, { 150,4128 }, { 151,4128 },
 { 152,4128 }, { 153,4128 }, { 154,4128 }, { 155,4128 }, { 156,4128 },
 { 157,4128 }, { 158,4128 }, { 159,4128 }, { 160,4128 }, { 161,4128 },
 { 162,4128 }, { 163,4128 }, { 164,4128 }, { 165,4128 }, { 166,4128 },
 { 167,4128 }, { 168,4128 }, { 169,4128 }, { 170,4128 }, { 171,4128 },
 { 172,4128 }, { 173,4128 }, { 174,4128 }, { 175,4128 }, { 176,4128 },
 { 177,4128 }, { 178,4128 }, { 179,4128 }, { 180,4128 }, { 181,4128 },
 { 182,4128 }, { 183,4128 }, { 184,4128 }, { 185,4128 }, { 186,4128 },
 { 187,4128 }, { 188,4128 }, { 189,4128 }, { 190,4128 }, { 191,4128 },
 { 192,4128 }, { 193,4128 }, { 194,4128 }, { 195,4128 }, { 196,4128 },

 { 197,4128 }, { 198,4128 }, { 199,4128 }, { 200,4128 }, { 201,4128 },
 { 202,4128 }, { 203,4128 }, { 204,4128 }, { 205,4128 }, { 206,4128 },
 { 207,4128 }, { 208,4128 }, { 209,4128 }, { 210,4128 }, { 211,4128 },
 { 212,4128 }, { 213,4128 }, { 214,4128 }, { 215,4128 }, { 216,4128 },
 { 217,4128 }, { 218,4128 }, { 219,4128 }, { 220,4128 }, { 221,4128 },
 { 222,4128 }, { 223,4128 }, { 224,4128 }, { 225,4128 }, { 226,4128 },
 { 227,4128 }, { 228,4128 }, { 229,4128 }, { 230,4128 }, { 231,4128 },
 { 232,4128 }, { 233,4128 }, { 234,4128 }, { 235,4128 }, { 236,4128 },
 { 237,4128 }, { 238,4128 }, { 239,4128 }, { 240,4128 }, { 241,4128 },
 { 242,4128 }, { 243,4128 }, { 244,4128 }, { 245,4128 }, { 246,4128 },

 { 247,4128 }, { 248,4128 }, { 249,4128 }, { 250,4128 }, { 251,4128 },
 { 252,4128 }, { 253,4128 }, { 254,4128 }, { 255,4128 }, { 256,4128 },
 {   0,   0 }, {   0,9560 }, {   1,3870 }, {   2,3870 }, {   3,3870 },
 {   4,3870 }, {   5,3870 }, {   6,3870 }, {   7,3870 }, {   8,3870 },
 {   9,3872 }, {  10,3874 }, {  11,3870 }, {  12,3870 }, {  13,3870 },
 {  14,3870 }, {  15,3870 }, {  16,3870 }, {  17,3870 }, {  18,3870 },
 {  19,3870 }, {  20,3870 }, {  21,3870 }, {  22,3870 }, {  23,3870 },
 {  24,3870 }, {  25,3870 }, {  26,3870 }, {  27,3870 }, {  28,3870 },
 {  29,3870 }, {  30,3870 }, {  31,3870 }, {  32,3872 }, {  33,3870 },
 {  34,3870 }, {  35,3870 }, {  36,3870 }, {  37,3870 }, {  38,3870 },

 {  39,3870 }, {  40,3870 }, {  41,3870 }, {  42,3870 }, {  43,3870 },
 {  44,3870 }, {  45,3870 }, {  46,3870 }, {  47,3870 }, {  48,3870 },
 {  49,3870 }, {  50,3870 }, {  51,3870 }, {  52,3870 }, {  53,3870 },
 {  54,3870 }, {  55,3870 }, {  56,3870 }, {  57,3870 }, {  58,3870 },
 {  59,3870 }, {  60,3870 }, {  61,3870 }, {  62,3870 }, {  63,3870 },
 {  64,3870 }, {  65,3870 }, {  66,3870 }, {  67,3870 }, {  68,3870 },
 {  69,3870 }, {  70,3870 }, {  71,3870 }, {  72,3870 }, {  73,3870 },
 {  74,3870 }, {  75,3870 }, {  76,3870 }, {  77,3870 }, {  78,3870 },
 {  79,3870 }, {  80,3870 }, {  81,3870 }, {  82,3870 }, {  83,3870 },
 {  84,3870 }, {  85,3870 }, {  86,3870 }, {  87,3870 }, {  88,3870 },

 {  89,3870 }, {  90,3870 }, {  91,3870 }, {  92,3870 }, {  93,3870 },
 {  94,3870 }, {  95,3870 }, {  96,3870 }, {  97,3870 }, {  98,3870 },
 {  99,3870 }, { 100,3870 }, { 101,3870 }, { 102,3870 }, { 103,3870 },
 { 104,3870 }, { 105,3870 }, { 106,3870 }, { 107,3870 }, { 108,3870 },
 { 109,3870 }, { 110,3870 }, { 111,3870 }, { 112,3870 }, { 113,3870 },
 { 114,3870 }, { 115,3870 }, { 116,3870 }, { 117,3870 }, { 118,3870 },
 { 119,3870 }, { 120,3870 }, { 121,3870 }, { 122,3870 }, { 123,3870 },
 { 124,3870 }, { 125,3870 }, { 126,3870 }, { 127,3870 }, { 128,3870 },
 { 129,3870 }, { 130,3870 }, { 131,3870 }, { 132,3870 }, { 133,3870 },
 { 134,3870 }, { 135,3870 }, { 136,3870 }, { 137,3870 }, { 138,3870 },

 { 139,3870 }, { 140,3870 }, { 141,3870 }, { 142,3870 }, { 143,3870 },
 { 144,3870 }, { 145,3870 }, { 146,3870 }, { 147,3870 }, { 148,3870 },
 { 149,3870 }, { 150,3870 }, { 151,3870 }, { 152,3870 }, { 153,3870 },
 { 154,3870 }, { 155,3870 }, { 156,3870 }, { 157,3870 }, { 158,3870 },
 { 159,3870 }, { 160,3870 }, { 161,3870 }, { 162,3870 }, { 163,3870 },
 { 164,3870 }, { 165,3870 }, { 166,3870 }, { 167,3870 }, { 168,3870 },
 { 169,3870 }, { 170,3870 }, { 171,3870 }, { 172,3870 }, { 173,3870 },
 { 174,3870 }, { 175,3870 }, { 176,3870 }, { 177,3870 }, { 178,3870 },
 { 179,3870 }, { 180,3870 }, { 181,3870 }, { 182,3870 }, { 183,3870 },
 { 184,3870 }, { 185,3870 }, { 186,3870 }, { 187,3870 }, { 188,3870 },

 { 189,3870 }, { 190,3870 }, { 191,3870 }, { 192,3870 }, { 193,3870 },
 { 194,3870 }, { 195,3870 }, { 196,3870 }, { 197,3870 }, { 198,3870 },
 { 199,3870 }, { 200,3870 }, { 201,3870 }, { 202,3870 }, { 203,3870 },
 { 204,3870 }, { 205,3870 }, { 206,3870 }, { 207,3870 }, { 208,3870 },
 { 209,3870 }, { 210,3870 }, { 211,3870 }, { 212,3870 }, { 213,3870 },
 { 214,3870 }, { 215,3870 }, { 216,3870 }, { 217,3870 }, { 218,3870 },
 { 219,3870 }, { 220,3870 }, { 221,3870 }, { 222,3870 }, { 223,3870 },
 { 224,3870 }, { 225,3870 }, { 226,3870 }, { 227,3870 }, { 228,3870 },
 { 229,3870 }, { 230,3870 }, { 231,3870 }, { 232,3870 }, { 233,3870 },
 { 234,3870 }, { 235,3870 }, { 236,3870 }, { 237,3870 }, { 238,3870 },

 { 239,3870 }, { 240,3870 }, { 241,3870 }, { 242,3870 }, { 243,3870 },
 { 244,3870 }, { 245,3870 }, { 246,3870 }, { 247,3870 }, { 248,3870 },
 { 249,3870 }, { 250,3870 }, { 251,3870 }, { 252,3870 }, { 253,3870 },
 { 254,3870 }, { 255,3870 }, { 256,3870 }, {   0,   0 }, {   0,9302 },
 {   1,3612 }, {   2,3612 }, {   3,3612 }, {   4,3612 }, {   5,3612 },
 {   6,3612 }, {   7,3612 }, {   8,3612 }, {   9,3614 }, {  10,3616 },
 {  11,3612 }, {  12,3612 }, {  13,3612 }, {  14,3612 }, {  15,3612 },
 {  16,3612 }, {  17,3612 }, {  18,3612 }, {  19,3612 }, {  20,3612 },
 {  21,3612 }, {  22,3612 }, {  23,3612 }, {  24,3612 }, {  25,3612 },
 {  26,3612 }, {  27,3612 }, {  28,3612 }, {  29,3612 }, {  30,3612 },

 {  31,3612 }, {  32,3614 }, {  33,3612 }, {  34,3612 }, {  35,3612 },
 {  36,3612 }, {  37,3612 }, {  38,3612 }, {  39,3612 }, {  40,3618 },
 {  41,3612 }, {  42,3612 }, {  43,3612 }, {  44,3612 }, {  45,3612 },
 {  46,3612 }, {  47,3612 }, {  48,3612 }, {  49,3612 }, {  50,3612 },
 {  51,3612 }, {  52,3612 }, {  53,3612 }, {  54,3612 }, {  55,3612 },
 {  56,3612 }, {  57,3612 }, {  58,3612 }, {  59,3612 }, {  60,3612 },
 {  61,3612 }, {  62,3612 }, {  63,3612 }, {  64,3612 }, {  65,3612 },
 {  66,3612 }, {  67,3612 }, {  68,3612 }, {  69,3612 }, {  70,3612 },
 {  71,3612 }, {  72,3612 }, {  73,3612 }, {  74,3612 }, {  75,3612 },
 {  76,3612 }, {  77,3612 }, {  78,3612 }, {  79,3612 }, {  80,3612 },

 {  81,3612 }, {  82,3612 }, {  83,3612 }, {  84,3612 }, {  85,3612 },
 {  86,3612 }, {  87,3612 }, {  88,3612 }, {  89,3612 }, {  90,3612 },
 {  91,3612 }, {  92,3612 }, {  93,3612 }, {  94,3612 }, {  95,3612 },
 {  96,3612 }, {  97,3612 }, {  98,3612 }, {  99,3612 }, { 100,3612 },
 { 101,3612 }, { 102,3612 }, { 103,3612 }, { 104,3612 }, { 105,3612 },
 { 106,3612 }, { 107,3612 }, { 108,3612 }, { 109,3612 }, { 110,3612 },
 { 111,3612 }, { 112,3612 }, { 113,3612 }, { 114,3612 }, { 115,3612 },
 { 116,3612 }, { 117,3612 }, { 118,3612 }, { 119,3612 }, { 120,3612 },
 { 121,3612 }, { 122,3612 }, { 123,3612 }, { 124,3612 }, { 125,3612 },
 { 126,3612 }, { 127,3612 }, { 128,3612 }, { 129,3612 }, { 130,3612 },

 { 131,3612 }, { 132,3612 }, { 133,3612 }, { 134,3612 }, { 135,3612 },
 { 136,3612 }, { 137,3612 }, { 138,3612 }, { 139,3612 }, { 140,3612 },
 { 141,3612 }, { 142,3612 }, { 143,3612 }, { 144,3612 }, { 145,3612 },
 { 146,3612 }, { 147,3612 }, { 148,3612 }, { 149,3612 }, { 150,3612 },
 { 151,3612 }, { 152,3612 }, { 153,3612 }, { 154,3612 }, { 155,3612 },
 { 156,3612 }, { 157,3612 }, { 158,3612 }, { 159,3612 }, { 160,3612 },
 { 161,3612 }, { 162,3612 }, { 163,3612 }, { 164,3612 }, { 165,3612 },
 { 166,3612 }, { 167,3612 }, { 168,3612 }, { 169,3612 }, { 170,3612 },
 { 171,3612 }, { 172,3612 }, { 173,3612 }, { 174,3612 }, { 175,3612 },
 { 176,3612 }, { 177,3612 }, { 178,3612 }, { 179,3612 }, { 180,3612 },

 { 181,3612 }, { 182,3612 }, { 183,3612 }, { 184,3612 }, { 185,3612 },
 { 186,3612 }, { 187,3612 }, { 188,3612 }, { 189,3612 }, { 190,3612 },
 { 191,3612 }, { 192,3612 }, { 193,3612 }, { 194,3612 }, { 195,3612 },
 { 196,3612 }, { 197,3612 }, { 198,3612 }, { 199,3612 }, { 200,3612 },
 { 201,3612 }, { 202,3612 }, { 203,3612 }, { 204,3612 }, { 205,3612 },
 { 206,3612 }, { 207,3612 }, { 208,3612 }, { 209,3612 }, { 210,3612 },
 { 211,3612 }, { 212,3612 }, { 213,3612 }, { 214,3612 }, { 215,3612 },
 { 216,3612 }, { 217,3612 }, { 218,3612 }, { 219,3612 }, { 220,3612 },
 { 221,3612 }, { 222,3612 }, { 223,3612 }, { 224,3612 }, { 225,3612 },
 { 226,3612 }, { 227,3612 }, { 228,3612 }, { 229,3612 }, { 230,3612 },

 { 231,3612 }, { 232,3612 }, { 233,3612 }, { 234,3612 }, { 235,3612 },
 { 236,3612 }, { 237,3612 }, { 238,3612 }, { 239,3612 }, { 240,3612 },
 { 241,3612 }, { 242,3612 }, { 243,3612 }, { 244,3612 }, { 245,3612 },
 { 246,3612 }, { 247,3612 }, { 248,3612 }, { 249,3612 }, { 250,3612 },
 { 251,3612 }, { 252,3612 }, { 253,3612 }, { 254,3612 }, { 255,3612 },
 { 256,3612 }, {   0,   0 }, {   0,9044 }, {   1,3354 }, {   2,3354 },
 {   3,3354 }, {   4,3354 }, {   5,3354 }, {   6,3354 }, {   7,3354 },
 {   8,3354 }, {   9,3356 }, {  10,3358 }, {  11,3354 }, {  12,3354 },
 {  13,3354 }, {  14,3354 }, {  15,3354 }, {  16,3354 }, {  17,3354 },
 {  18,3354 }, {  19,3354 }, {  20,3354 }, {  21,3354 }, {  22,3354 },

 {  23,3354 }, {  24,3354 }, {  25,3354 }, {  26,3354 }, {  27,3354 },
 {  28,3354 }, {  29,3354 }, {  30,3354 }, {  31,3354 }, {  32,3356 },
 {  33,3354 }, {  34,3354 }, {  35,3354 }, {  36,3354 }, {  37,3354 },
 {  38,3354 }, {  39,3354 }, {  40,3360 }, {  41,3354 }, {  42,3354 },
 {  43,3354 }, {  44,3354 }, {  45,3354 }, {  46,3354 }, {  47,3354 },
 {  48,3354 }, {  49,3354 }, {  50,3354 }, {  51,3354 }, {  52,3354 },
 {  53,3354 }, {  54,3354 }, {  55,3354 }, {  56,3354 }, {  57,3354 },
 {  58,3354 }, {  59,3354 }, {  60,3354 }, {  61,3354 }, {  62,3354 },
 {  63,3354 }, {  64,3354 }, {  65,3354 }, {  66,3354 }, {  67,3354 },
 {  68,3354 }, {  69,3354 }, {  70,3354 }, {  71,3354 }, {  72,3354 },

 {  73,3354 }, {  74,3354 }, {  75,3354 }, {  76,3354 }, {  77,3354 },
 {  78,3354 }, {  79,3354 }, {  80,3354 }, {  81,3354 }, {  82,3354 },
 {  83,3354 }, {  84,3354 }, {  85,3354 }, {  86,3354 }, {  87,3354 },
 {  88,3354 }, {  89,3354 }, {  90,3354 }, {  91,3354 }, {  92,3354 },
 {  93,3354 }, {  94,3354 }, {  95,3354 }, {  96,3354 }, {  97,3354 },
 {  98,3354 }, {  99,3354 }, { 100,3354 }, { 101,3354 }, { 102,3354 },
 { 103,3354 }, { 104,3354 }, { 105,3354 }, { 106,3354 }, { 107,3354 },
 { 108,3354 }, { 109,3354 }, { 110,3354 }, { 111,3354 }, { 112,3354 },
 { 113,3354 }, { 114,3354 }, { 115,3354 }, { 116,3354 }, { 117,3354 },
 { 118,3354 }, { 119,3354 }, { 120,3354 }, { 121,3354 }, { 122,3354 },

 { 123,3354 }, { 124,3354 }, { 125,3354 }, { 126,3354 }, { 127,3354 },
 { 128,3354 }, { 129,3354 }, { 130,3354 }, { 131,3354 }, { 132,3354 },
 { 133,3354 }, { 134,3354 }, { 135,3354 }, { 136,3354 }, { 137,3354 },
 { 138,3354 }, { 139,3354 }, { 140,3354 }, { 141,3354 }, { 142,3354 },
 { 143,3354 }, { 144,3354 }, { 145,3354 }, { 146,3354 }, { 147,3354 },
 { 148,3354 }, { 149,3354 }, { 150,3354 }, { 151,3354 }, { 152,3354 },
 { 153,3354 }, { 154,3354 }, { 155,3354 }, { 156,3354 }, { 157,3354 },
 { 158,3354 }, { 159,3354 }, { 160,3354 }, { 161,3354 }, { 162,3354 },
 { 163,3354 }, { 164,3354 }, { 165,3354 }, { 166,3354 }, { 167,3354 },
 { 168,3354 }, { 169,3354 }, { 170,3354 }, { 171,3354 }, { 172,3354 },

 { 173,3354 }, { 174,3354 }, { 175,3354 }, { 176,3354 }, { 177,3354 },
 { 178,3354 }, { 179,3354 }, { 180,3354 }, { 181,3354 }, { 182,3354 },
 { 183,3354 }, { 184,3354 }, { 185,3354 }, { 186,3354 }, { 187,3354 },
 { 188,3354 }, { 189,3354 }, { 190,3354 }, { 191,3354 }, { 192,3354 },
 { 193,3354 }, { 194,3354 }, { 195,3354 }, { 196,3354 }, { 197,3354 },
 { 198,3354 }, { 199,3354 }, { 200,3354 }, { 201,3354 }, { 202,3354 },
 { 203,3354 }, { 204,3354 }, { 205,3354 }, { 206,3354 }, { 207,3354 },
 { 208,3354 }, { 209,3354 }, { 210,3354 }, { 211,3354 }, { 212,3354 },
 { 213,3354 }, { 214,3354 }, { 215,3354 }, { 216,3354 }, { 217,3354 },
 { 218,3354 }, { 219,3354 }, { 220,3354 }, { 221,3354 }, { 222,3354 },

 { 223,3354 }, { 224,3354 }, { 225,3354 }, { 226,3354 }, { 227,3354 },
 { 228,3354 }, { 229,3354 }, { 230,3354 }, { 231,3354 }, { 232,3354 },
 { 233,3354 }, { 234,3354 }, { 235,3354 }, { 236,3354 }, { 237,3354 },
 { 238,3354 }, { 239,3354 }, { 240,3354 }, { 241,3354 }, { 242,3354 },
 { 243,3354 }, { 244,3354 }, { 245,3354 }, { 246,3354 }, { 247,3354 },
 { 248,3354 }, { 249,3354 }, { 250,3354 }, { 251,3354 }, { 252,3354 },
 { 253,3354 }, { 254,3354 }, { 255,3354 }, { 256,3354 }, {   0,   0 },
 {   0,8786 }, {   1,3096 }, {   2,3096 }, {   3,3096 }, {   4,3096 },
 {   5,3096 }, {   6,3096 }, {   7,3096 }, {   8,3096 }, {   9,3098 },
 {  10,3100 }, {  11,3096 }, {  12,3096 }, {  13,3096 }, {  14,3096 },

 {  15,3096 }, {  16,3096 }, {  17,3096 }, {  18,3096 }, {  19,3096 },
 {  20,3096 }, {  21,3096 }, {  22,3096 }, {  23,3096 }, {  24,3096 },
 {  25,3096 }, {  26,3096 }, {  27,3096 }, {  28,3096 }, {  29,3096 },
 {  30,3096 }, {  31,3096 }, {  32,3098 }, {  33,3096 }, {  34,3096 },
 {  35,3096 }, {  36,3096 }, {  37,3096 }, {  38,3096 }, {  39,3096 },
 {  40,3104 }, {  41,3096 }, {  42,3096 }, {  43,3096 }, {  44,3096 },
 {  45,3096 }, {  46,3096 }, {  47,3096 }, {  48,3096 }, {  49,3096 },
 {  50,3096 }, {  51,3096 }, {  52,3096 }, {  53,3096 }, {  54,3096 },
 {  55,3096 }, {  56,3096 }, {  57,3096 }, {  58,3096 }, {  59,3096 },
 {  60,3096 }, {  61,3096 }, {  62,3096 }, {  63,3096 }, {  64,3096 },

 {  65,3096 }, {  66,3096 }, {  67,3096 }, {  68,3096 }, {  69,3096 },
 {  70,3096 }, {  71,3096 }, {  72,3096 }, {  73,3096 }, {  74,3096 },
 {  75,3096 }, {  76,3096 }, {  77,3096 }, {  78,3096 }, {  79,3096 },
 {  80,3096 }, {  81,3096 }, {  82,3096 }, {  83,3096 }, {  84,3096 },
 {  85,3096 }, {  86,3096 }, {  87,3096 }, {  88,3096 }, {  89,3096 },
 {  90,3096 }, {  91,3096 }, {  92,3096 }, {  93,3096 }, {  94,3096 },
 {  95,3096 }, {  96,3096 }, {  97,3096 }, {  98,3096 }, {  99,3096 },
 { 100,3096 }, { 101,3096 }, { 102,3096 }, { 103,3096 }, { 104,3096 },
 { 105,3096 }, { 106,3096 }, { 107,3096 }, { 108,3096 }, { 109,3096 },
 { 110,3096 }, { 111,3096 }, { 112,3096 }, { 113,3096 }, { 114,3096 },

 { 115,3096 }, { 116,3096 }, { 117,3096 }, { 118,3096 }, { 119,3096 },
 { 120,3096 }, { 121,3096 }, { 122,3096 }, { 123,3096 }, { 124,3096 },
 { 125,3096 }, { 126,3096 }, { 127,3096 }, { 128,3096 }, { 129,3096 },
 { 130,3096 }, { 131,3096 }, { 132,3096 }, { 133,3096 }, { 134,3096 },
 { 135,3096 }, { 136,3096 }, { 137,3096 }, { 138,3096 }, { 139,3096 },
 { 140,3096 }, { 141,3096 }, { 142,3096 }, { 143,3096 }, { 144,3096 },
 { 145,3096 }, { 146,3096 }, { 147,3096 }, { 148,3096 }, { 149,3096 },
 { 150,3096 }, { 151,3096 }, { 152,3096 }, { 153,3096 }, { 154,3096 },
 { 155,3096 }, { 156,3096 }, { 157,3096 }, { 158,3096 }, { 159,3096 },
 { 160,3096 }, { 161,3096 }, { 162,3096 }, { 163,3096 }, { 164,3096 },

 { 165,3096 }, { 166,3096 }, { 167,3096 }, { 168,3096 }, { 169,3096 },
 { 170,3096 }, { 171,3096 }, { 172,3096 }, { 173,3096 }, { 174,3096 },
 { 175,3096 }, { 176,3096 }, { 177,3096 }, { 178,3096 }, { 179,3096 },
 { 180,3096 }, { 181,3096 }, { 182,3096 }, { 183,3096 }, { 184,3096 },
 { 185,3096 }, { 186,3096 }, { 187,3096 }, { 188,3096 }, { 189,3096 },
 { 190,3096 }, { 191,3096 }, { 192,3096 }, { 193,3096 }, { 194,3096 },
 { 195,3096 }, { 196,3096 }, { 197,3096 }, { 198,3096 }, { 199,3096 },
 { 200,3096 }, { 201,3096 }, { 202,3096 }, { 203,3096 }, { 204,3096 },
 { 205,3096 }, { 206,3096 }, { 207,3096 }, { 208,3096 }, { 209,3096 },
 { 210,3096 }, { 211,3096 }, { 212,3096 }, { 213,3096 }, { 214,3096 },

 { 215,3096 }, { 216,3096 }, { 217,3096 }, { 218,3096 }, { 219,3096 },
 { 220,3096 }, { 221,3096 }, { 222,3096 }, { 223,3096 }, { 224,3096 },
 { 225,3096 }, { 226,3096 }, { 227,3096 }, { 228,3096 }, { 229,3096 },
 { 230,3096 }, { 231,3096 }, { 232,3096 }, { 233,3096 }, { 234,3096 },
 { 235,3096 }, { 236,3096 }, { 237,3096 }, { 238,3096 }, { 239,3096 },
 { 240,3096 }, { 241,3096 }, { 242,3096 }, { 243,3096 }, { 244,3096 },
 { 245,3096 }, { 246,3096 }, { 247,3096 }, { 248,3096 }, { 249,3096 },
 { 250,3096 }, { 251,3096 }, { 252,3096 }, { 253,3096 }, { 254,3096 },
 { 255,3096 }, { 256,3096 }, {   0,   0 }, {   0,8528 }, {   1,2838 },
 {   2,2838 }, {   3,2838 }, {   4,2838 }, {   5,2838 }, {   6,2838 },

 {   7,2838 }, {   8,2838 }, {   9,2840 }, {  10,2842 }, {  11,2838 },
 {  12,2838 }, {  13,2838 }, {  14,2838 }, {  15,2838 }, {  16,2838 },
 {  17,2838 }, {  18,2838 }, {  19,2838 }, {  20,2838 }, {  21,2838 },
 {  22,2838 }, {  23,2838 }, {  24,2838 }, {  25,2838 }, {  26,2838 },
 {  27,2838 }, {  28,2838 }, {  29,2838 }, {  30,2838 }, {  31,2838 },
 {  32,2840 }, {  33,2838 }, {  34,2838 }, {  35,2838 }, {  36,2838 },
 {  37,2838 }, {  38,2838 }, {  39,2838 }, {  40,2846 }, {  41,2838 },
 {  42,2838 }, {  43,2838 }, {  44,2838 }, {  45,2838 }, {  46,2838 },
 {  47,2838 }, {  48,2838 }, {  49,2838 }, {  50,2838 }, {  51,2838 },
 {  52,2838 }, {  53,2838 }, {  54,2838 }, {  55,2838 }, {  56,2838 },

 {  57,2838 }, {  58,2838 }, {  59,2838 }, {  60,2838 }, {  61,2838 },
 {  62,2838 }, {  63,2838 }, {  64,2838 }, {  65,2838 }, {  66,2838 },
 {  67,2838 }, {  68,2838 }, {  69,2838 }, {  70,2838 }, {  71,2838 },
 {  72,2838 }, {  73,2838 }, {  74,2838 }, {  75,2838 }, {  76,2838 },
 {  77,2838 }, {  78,2838 }, {  79,2838 }, {  80,2838 }, {  81,2838 },
 {  82,2838 }, {  83,2838 }, {  84,2838 }, {  85,2838 }, {  86,2838 },
 {  87,2838 }, {  88,2838 }, {  89,2838 }, {  90,2838 }, {  91,2838 },
 {  92,2838 }, {  93,2838 }, {  94,2838 }, {  95,2838 }, {  96,2838 },
 {  97,2838 }, {  98,2838 }, {  99,2838 }, { 100,2838 }, { 101,2838 },
 { 102,2838 }, { 103,2838 }, { 104,2838 }, { 105,2838 }, { 106,2838 },

 { 107,2838 }, { 108,2838 }, { 109,2838 }, { 110,2838 }, { 111,2838 },
 { 112,2838 }, { 113,2838 }, { 114,2838 }, { 115,2838 }, { 116,2838 },
 { 117,2838 }, { 118,2838 }, { 119,2838 }, { 120,2838 }, { 121,2838 },
 { 122,2838 }, { 123,2838 }, { 124,2838 }, { 125,2838 }, { 126,2838 },
 { 127,2838 }, { 128,2838 }, { 129,2838 }, { 130,2838 }, { 131,2838 },
 { 132,2838 }, { 133,2838 }, { 134,2838 }, { 135,2838 }, { 136,2838 },
 { 137,2838 }, { 138,2838 }, { 139,2838 }, { 140,2838 }, { 141,2838 },
 { 142,2838 }, { 143,2838 }, { 144,2838 }, { 145,2838 }, { 146,2838 },
 { 147,2838 }, { 148,2838 }, { 149,2838 }, { 150,2838 }, { 151,2838 },
 { 152,2838 }, { 153,2838 }, { 154,2838 }, { 155,2838 }, { 156,2838 },

 { 157,2838 }, { 158,2838 }, { 159,2838 }, { 160,2838 }, { 161,2838 },
 { 162,2838 }, { 163,2838 }, { 164,2838 }, { 165,2838 }, { 166,2838 },
 { 167,2838 }, { 168,2838 }, { 169,2838 }, { 170,2838 }, { 171,2838 },
 { 172,2838 }, { 173,2838 }, { 174,2838 }, { 175,2838 }, { 176,2838 },
 { 177,2838 }, { 178,2838 }, { 179,2838 }, { 180,2838 }, { 181,2838 },
 { 182,2838 }, { 183,2838 }, { 184,2838 }, { 185,2838 }, { 186,2838 },
 { 187,2838 }, { 188,2838 }, { 189,2838 }, { 190,2838 }, { 191,2838 },
 { 192,2838 }, { 193,2838 }, { 194,2838 }, { 195,2838 }, { 196,2838 },
 { 197,2838 }, { 198,2838 }, { 199,2838 }, { 200,2838 }, { 201,2838 },
 { 202,2838 }, { 203,2838 }, { 204,2838 }, { 205,2838 }, { 206,2838 },

 { 207,2838 }, { 208,2838 }, { 209,2838 }, { 210,2838 }, { 211,2838 },
 { 212,2838 }, { 213,2838 }, { 214,2838 }, { 215,2838 }, { 216,2838 },
 { 217,2838 }, { 218,2838 }, { 219,2838 }, { 220,2838 }, { 221,2838 },
 { 222,2838 }, { 223,2838 }, { 224,2838 }, { 225,2838 }, { 226,2838 },
 { 227,2838 }, { 228,2838 }, { 229,2838 }, { 230,2838 }, { 231,2838 },
 { 232,2838 }, { 233,2838 }, { 234,2838 }, { 235,2838 }, { 236,2838 },
 { 237,2838 }, { 238,2838 }, { 239,2838 }, { 240,2838 }, { 241,2838 },
 { 242,2838 }, { 243,2838 }, { 244,2838 }, { 245,2838 }, { 246,2838 },
 { 247,2838 }, { 248,2838 }, { 249,2838 }, { 250,2838 }, { 251,2838 },
 { 252,2838 }, { 253,2838 }, { 254,2838 }, { 255,2838 }, { 256,2838 },

 {   0,   0 }, {   0,8270 }, {   1,2604 }, {   2,2604 }, {   3,2604 },
 {   4,2604 }, {   5,2604 }, {   6,2604 }, {   7,2604 }, {   8,2604 },
 {   9,2582 }, {  10,2584 }, {  11,2604 }, {  12,2604 }, {  13,2604 },
 {  14,2604 }, {  15,2604 }, {  16,2604 }, {  17,2604 }, {  18,2604 },
 {  19,2604 }, {  20,2604 }, {  21,2604 }, {  22,2604 }, {  23,2604 },
 {  24,2604 }, {  25,2604 }, {  26,2604 }, {  27,2604 }, {  28,2604 },
 {  29,2604 }, {  30,2604 }, {  31,2604 }, {  32,2582 }, {  33,2604 },
 {  34,2604 }, {  35,2604 }, {  36,2604 }, {  37,2604 }, {  38,2604 },
 {  39,2604 }, {  40,2590 }, {  41,2593 }, {  42,2604 }, {  43,2604 },
 {  44,2604 }, {  45,2604 }, {  46,2604 }, {  47,2604 }, {  48,2604 },

 {  49,2604 }, {  50,2604 }, {  51,2604 }, {  52,2604 }, {  53,2604 },
 {  54,2604 }, {  55,2604 }, {  56,2604 }, {  57,2604 }, {  58,2604 },
 {  59,2604 }, {  60,2604 }, {  61,2604 }, {  62,2604 }, {  63,2604 },
 {  64,2604 }, {  65,2604 }, {  66,2604 }, {  67,2604 }, {  68,2604 },
 {  69,2604 }, {  70,2604 }, {  71,2604 }, {  72,2604 }, {  73,2604 },
 {  74,2604 }, {  75,2604 }, {  76,2604 }, {  77,2604 }, {  78,2604 },
 {  79,2604 }, {  80,2604 }, {  81,2604 }, {  82,2604 }, {  83,2604 },
 {  84,2604 }, {  85,2604 }, {  86,2604 }, {  87,2604 }, {  88,2604 },
 {  89,2604 }, {  90,2604 }, {  91,2604 }, {  92,2604 }, {  93,2604 },
 {  94,2604 }, {  95,2604 }, {  96,2604 }, {  97,2604 }, {  98,2604 },

 {  99,2604 }, { 100,2604 }, { 101,2604 }, { 102,2604 }, { 103,2604 },
 { 104,2604 }, { 105,2604 }, { 106,2604 }, { 107,2604 }, { 108,2604 },
 { 109,2604 }, { 110,2604 }, { 111,2604 }, { 112,2604 }, { 113,2604 },
 { 114,2604 }, { 115,2604 }, { 116,2604 }, { 117,2604 }, { 118,2604 },
 { 119,2604 }, { 120,2604 }, { 121,2604 }, { 122,2604 }, { 123,2604 },
 { 124,2604 }, { 125,2604 }, { 126,2604 }, { 127,2604 }, { 128,2604 },
 { 129,2604 }, { 130,2604 }, { 131,2604 }, { 132,2604 }, { 133,2604 },
 { 134,2604 }, { 135,2604 }, { 136,2604 }, { 137,2604 }, { 138,2604 },
 { 139,2604 }, { 140,2604 }, { 141,2604 }, { 142,2604 }, { 143,2604 },
 { 144,2604 }, { 145,2604 }, { 146,2604 }, { 147,2604 }, { 148,2604 },

 { 149,2604 }, { 150,2604 }, { 151,2604 }, { 152,2604 }, { 153,2604 },
 { 154,2604 }, { 155,2604 }, { 156,2604 }, { 157,2604 }, { 158,2604 },
 { 159,2604 }, { 160,2604 }, { 161,2604 }, { 162,2604 }, { 163,2604 },
 { 164,2604 }, { 165,2604 }, { 166,2604 }, { 167,2604 }, { 168,2604 },
 { 169,2604 }, { 170,2604 }, { 171,2604 }, { 172,2604 }, { 173,2604 },
 { 174,2604 }, { 175,2604 }, { 176,2604 }, { 177,2604 }, { 178,2604 },
 { 179,2604 }, { 180,2604 }, { 181,2604 }, { 182,2604 }, { 183,2604 },
 { 184,2604 }, { 185,2604 }, { 186,2604 }, { 187,2604 }, { 188,2604 },
 { 189,2604 }, { 190,2604 }, { 191,2604 }, { 192,2604 }, { 193,2604 },
 { 194,2604 }, { 195,2604 }, { 196,2604 }, { 197,2604 }, { 198,2604 },

 { 199,2604 }, { 200,2604 }, { 201,2604 }, { 202,2604 }, { 203,2604 },
 { 204,2604 }, { 205,2604 }, { 206,2604 }, { 207,2604 }, { 208,2604 },
 { 209,2604 }, { 210,2604 }, { 211,2604 }, { 212,2604 }, { 213,2604 },
 { 214,2604 }, { 215,2604 }, { 216,2604 }, { 217,2604 }, { 218,2604 },
 { 219,2604 }, { 220,2604 }, { 221,2604 }, { 222,2604 }, { 223,2604 },
 { 224,2604 }, { 225,2604 }, { 226,2604 }, { 227,2604 }, { 228,2604 },
 { 229,2604 }, { 230,2604 }, { 231,2604 }, { 232,2604 }, { 233,2604 },
 { 234,2604 }, { 235,2604 }, { 236,2604 }, { 237,2604 }, { 238,2604 },
 { 239,2604 }, { 240,2604 }, { 241,2604 }, { 242,2604 }, { 243,2604 },
 { 244,2604 }, { 245,2604 }, { 246,2604 }, { 247,2604 }, { 248,2604 },

 { 249,2604 }, { 250,2604 }, { 251,2604 }, { 252,2604 }, { 253,2604 },
 { 254,2604 }, { 255,2604 }, { 256,2604 }, {   0,   0 }, {   0,8012 },
 {   1,2346 }, {   2,2346 }, {   3,2346 }, {   4,2346 }, {   5,2346 },
 {   6,2346 }, {   7,2346 }, {   8,2346 }, {   9,2324 }, {  10,2326 },
 {  11,2346 }, {  12,2346 }, {  13,2346 }, {  14,2346 }, {  15,2346 },
 {  16,2346 }, {  17,2346 }, {  18,2346 }, {  19,2346 }, {  20,2346 },
 {  21,2346 }, {  22,2346 }, {  23,2346 }, {  24,2346 }, {  25,2346 },
 {  26,2346 }, {  27,2346 }, {  28,2346 }, {  29,2346 }, {  30,2346 },
 {  31,2346 }, {  32,2324 }, {  33,2346 }, {  34,2346 }, {  35,2346 },
 {  36,2346 }, {  37,2346 }, {  38,2346 }, {  39,2346 }, {  40,2332 },

 {  41,2335 }, {  42,2346 }, {  43,2346 }, {  44,2346 }, {  45,2346 },
 {  46,2346 }, {  47,2346 }, {  48,2346 }, {  49,2346 }, {  50,2346 },
 {  51,2346 }, {  52,2346 }, {  53,2346 }, {  54,2346 }, {  55,2346 },
 {  56,2346 }, {  57,2346 }, {  58,2346 }, {  59,2346 }, {  60,2346 },
 {  61,2346 }, {  62,2346 }, {  63,2346 }, {  64,2346 }, {  65,2346 },
 {  66,2346 }, {  67,2346 }, {  68,2346 }, {  69,2346 }, {  70,2346 },
 {  71,2346 }, {  72,2346 }, {  73,2346 }, {  74,2346 }, {  75,2346 },
 {  76,2346 }, {  77,2346 }, {  78,2346 }, {  79,2346 }, {  80,2346 },
 {  81,2346 }, {  82,2346 }, {  83,2346 }, {  84,2346 }, {  85,2346 },
 {  86,2346 }, {  87,2346 }, {  88,2346 }, {  89,2346 }, {  90,2346 },

 {  91,2346 }, {  92,2346 }, {  93,2346 }, {  94,2346 }, {  95,2346 },
 {  96,2346 }, {  97,2346 }, {  98,2346 }, {  99,2346 }, { 100,2346 },
 { 101,2346 }, { 102,2346 }, { 103,2346 }, { 104,2346 }, { 105,2346 },
 { 106,2346 }, { 107,2346 }, { 108,2346 }, { 109,2346 }, { 110,2346 },
 { 111,2346 }, { 112,2346 }, { 113,2346 }, { 114,2346 }, { 115,2346 },
 { 116,2346 }, { 117,2346 }, { 118,2346 }, { 119,2346 }, { 120,2346 },
 { 121,2346 }, { 122,2346 }, { 123,2346 }, { 124,2346 }, { 125,2346 },
 { 126,2346 }, { 127,2346 }, { 128,2346 }, { 129,2346 }, { 130,2346 },
 { 131,2346 }, { 132,2346 }, { 133,2346 }, { 134,2346 }, { 135,2346 },
 { 136,2346 }, { 137,2346 }, { 138,2346 }, { 139,2346 }, { 140,2346 },

 { 141,2346 }, { 142,2346 }, { 143,2346 }, { 144,2346 }, { 145,2346 },
 { 146,2346 }, { 147,2346 }, { 148,2346 }, { 149,2346 }, { 150,2346 },
 { 151,2346 }, { 152,2346 }, { 153,2346 }, { 154,2346 }, { 155,2346 },
 { 156,2346 }, { 157,2346 }, { 158,2346 }, { 159,2346 }, { 160,2346 },
 { 161,2346 }, { 162,2346 }, { 163,2346 }, { 164,2346 }, { 165,2346 },
 { 166,2346 }, { 167,2346 }, { 168,2346 }, { 169,2346 }, { 170,2346 },
 { 171,2346 }, { 172,2346 }, { 173,2346 }, { 174,2346 }, { 175,2346 },
 { 176,2346 }, { 177,2346 }, { 178,2346 }, { 179,2346 }, { 180,2346 },
 { 181,2346 }, { 182,2346 }, { 183,2346 }, { 184,2346 }, { 185,2346 },
 { 186,2346 }, { 187,2346 }, { 188,2346 }, { 189,2346 }, { 190,2346 },

 { 191,2346 }, { 192,2346 }, { 193,2346 }, { 194,2346 }, { 195,2346 },
 { 196,2346 }, { 197,2346 }, { 198,2346 }, { 199,2346 }, { 200,2346 },
 { 201,2346 }, { 202,2346 }, { 203,2346 }, { 204,2346 }, { 205,2346 },
 { 206,2346 }, { 207,2346 }, { 208,2346 }, { 209,2346 }, { 210,2346 },
 { 211,2346 }, { 212,2346 }, { 213,2346 }, { 214,2346 }, { 215,2346 },
 { 216,2346 }, { 217,2346 }, { 218,2346 }, { 219,2346 }, { 220,2346 },
 { 221,2346 }, { 222,2346 }, { 223,2346 }, { 224,2346 }, { 225,2346 },
 { 226,2346 }, { 227,2346 }, { 228,2346 }, { 229,2346 }, { 230,2346 },
 { 231,2346 }, { 232,2346 }, { 233,2346 }, { 234,2346 }, { 235,2346 },
 { 236,2346 }, { 237,2346 }, { 238,2346 }, { 239,2346 }, { 240,2346 },

 { 241,2346 }, { 242,2346 }, { 243,2346 }, { 244,2346 }, { 245,2346 },
 { 246,2346 }, { 247,2346 }, { 248,2346 }, { 249,2346 }, { 250,2346 },
 { 251,2346 }, { 252,2346 }, { 253,2346 }, { 254,2346 }, { 255,2346 },
 { 256,2346 }, {   0,   0 }, {   0,7754 }, {   1,2064 }, {   2,2064 },
 {   3,2064 }, {   4,2064 }, {   5,2064 }, {   6,2064 }, {   7,2064 },
 {   8,2064 }, {   9,2066 }, {  10,2068 }, {  11,2064 }, {  12,2064 },
 {  13,2064 }, {  14,2064 }, {  15,2064 }, {  16,2064 }, {  17,2064 },
 {  18,2064 }, {  19,2064 }, {  20,2064 }, {  21,2064 }, {  22,2064 },
 {  23,2064 }, {  24,2064 }, {  25,2064 }, {  26,2064 }, {  27,2064 },
 {  28,2064 }, {  29,2064 }, {  30,2064 }, {  31,2064 }, {  32,2066 },

 {  33,2064 }, {  34,2064 }, {  35,2064 }, {  36,2064 }, {  37,2064 },
 {  38,2064 }, {  39,2064 }, {  40,2079 }, {  41,2081 }, {  42,2064 },
 {  43,2064 }, {  44,2064 }, {  45,2064 }, {  46,2064 }, {  47,2064 },
 {  48,2064 }, {  49,2064 }, {  50,2064 }, {  51,2064 }, {  52,2064 },
 {  53,2064 }, {  54,2064 }, {  55,2064 }, {  56,2064 }, {  57,2064 },
 {  58,2064 }, {  59,2064 }, {  60,2064 }, {  61,2064 }, {  62,2064 },
 {  63,2064 }, {  64,2064 }, {  65,2064 }, {  66,2064 }, {  67,2064 },
 {  68,2064 }, {  69,2064 }, {  70,2064 }, {  71,2064 }, {  72,2064 },
 {  73,2064 }, {  74,2064 }, {  75,2064 }, {  76,2064 }, {  77,2064 },
 {  78,2064 }, {  79,2064 }, {  80,2064 }, {  81,2064 }, {  82,2064 },

 {  83,2064 }, {  84,2064 }, {  85,2064 }, {  86,2064 }, {  87,2064 },
 {  88,2064 }, {  89,2064 }, {  90,2064 }, {  91,2064 }, {  92,2064 },
 {  93,2064 }, {  94,2064 }, {  95,2064 }, {  96,2064 }, {  97,2064 },
 {  98,2064 }, {  99,2064 }, { 100,2064 }, { 101,2064 }, { 102,2064 },
 { 103,2064 }, { 104,2064 }, { 105,2064 }, { 106,2064 }, { 107,2064 },
 { 108,2064 }, { 109,2064 }, { 110,2064 }, { 111,2064 }, { 112,2064 },
 { 113,2064 }, { 114,2064 }, { 115,2064 }, { 116,2064 }, { 117,2064 },
 { 118,2064 }, { 119,2064 }, { 120,2064 }, { 121,2064 }, { 122,2064 },
 { 123,2064 }, { 124,2064 }, { 125,2064 }, { 126,2064 }, { 127,2064 },
 { 128,2064 }, { 129,2064 }, { 130,2064 }, { 131,2064 }, { 132,2064 },

 { 133,2064 }, { 134,2064 }, { 135,2064 }, { 136,2064 }, { 137,2064 },
 { 138,2064 }, { 139,2064 }, { 140,2064 }, { 141,2064 }, { 142,2064 },
 { 143,2064 }, { 144,2064 }, { 145,2064 }, { 146,2064 }, { 147,2064 },
 { 148,2064 }, { 149,2064 }, { 150,2064 }, { 151,2064 }, { 152,2064 },
 { 153,2064 }, { 154,2064 }, { 155,2064 }, { 156,2064 }, { 157,2064 },
 { 158,2064 }, { 159,2064 }, { 160,2064 }, { 161,2064 }, { 162,2064 },
 { 163,2064 }, { 164,2064 }, { 165,2064 }, { 166,2064 }, { 167,2064 },
 { 168,2064 }, { 169,2064 }, { 170,2064 }, { 171,2064 }, { 172,2064 },
 { 173,2064 }, { 174,2064 }, { 175,2064 }, { 176,2064 }, { 177,2064 },
 { 178,2064 }, { 179,2064 }, { 180,2064 }, { 181,2064 }, { 182,2064 },

 { 183,2064 }, { 184,2064 }, { 185,2064 }, { 186,2064 }, { 187,2064 },
 { 188,2064 }, { 189,2064 }, { 190,2064 }, { 191,2064 }, { 192,2064 },
 { 193,2064 }, { 194,2064 }, { 195,2064 }, { 196,2064 }, { 197,2064 },
 { 198,2064 }, { 199,2064 }, { 200,2064 }, { 201,2064 }, { 202,2064 },
 { 203,2064 }, { 204,2064 }, { 205,2064 }, { 206,2064 }, { 207,2064 },
 { 208,2064 }, { 209,2064 }, { 210,2064 }, { 211,2064 }, { 212,2064 },
 { 213,2064 }, { 214,2064 }, { 215,2064 }, { 216,2064 }, { 217,2064 },
 { 218,2064 }, { 219,2064 }, { 220,2064 }, { 221,2064 }, { 222,2064 },
 { 223,2064 }, { 224,2064 }, { 225,2064 }, { 226,2064 }, { 227,2064 },
 { 228,2064 }, { 229,2064 }, { 230,2064 }, { 231,2064 }, { 232,2064 },

 { 233,2064 }, { 234,2064 }, { 235,2064 }, { 236,2064 }, { 237,2064 },
 { 238,2064 }, { 239,2064 }, { 240,2064 }, { 241,2064 }, { 242,2064 },
 { 243,2064 }, { 244,2064 }, { 245,2064 }, { 246,2064 }, { 247,2064 },
 { 248,2064 }, { 249,2064 }, { 250,2064 }, { 251,2064 }, { 252,2064 },
 { 253,2064 }, { 254,2064 }, { 255,2064 }, { 256,2064 }, {   0,   0 },
 {   0,7496 }, {   1,1806 }, {   2,1806 }, {   3,1806 }, {   4,1806 },
 {   5,1806 }, {   6,1806 }, {   7,1806 }, {   8,1806 }, {   9,1808 },
 {  10,1810 }, {  11,1806 }, {  12,1806 }, {  13,1806 }, {  14,1806 },
 {  15,1806 }, {  16,1806 }, {  17,1806 }, {  18,1806 }, {  19,1806 },
 {  20,1806 }, {  21,1806 }, {  22,1806 }, {  23,1806 }, {  24,1806 },

 {  25,1806 }, {  26,1806 }, {  27,1806 }, {  28,1806 }, {  29,1806 },
 {  30,1806 }, {  31,1806 }, {  32,1808 }, {  33,1806 }, {  34,1806 },
 {  35,1806 }, {  36,1806 }, {  37,1806 }, {  38,1806 }, {  39,1806 },
 {  40,1821 }, {  41,1823 }, {  42,1806 }, {  43,1806 }, {  44,1806 },
 {  45,1806 }, {  46,1806 }, {  47,1806 }, {  48,1806 }, {  49,1806 },
 {  50,1806 }, {  51,1806 }, {  52,1806 }, {  53,1806 }, {  54,1806 },
 {  55,1806 }, {  56,1806 }, {  57,1806 }, {  58,1806 }, {  59,1806 },
 {  60,1806 }, {  61,1806 }, {  62,1806 }, {  63,1806 }, {  64,1806 },
 {  65,1806 }, {  66,1806 }, {  67,1806 }, {  68,1806 }, {  69,1806 },
 {  70,1806 }, {  71,1806 }, {  72,1806 }, {  73,1806 }, {  74,1806 },

 {  75,1806 }, {  76,1806 }, {  77,1806 }, {  78,1806 }, {  79,1806 },
 {  80,1806 }, {  81,1806 }, {  82,1806 }, {  83,1806 }, {  84,1806 },
 {  85,1806 }, {  86,1806 }, {  87,1806 }, {  88,1806 }, {  89,1806 },
 {  90,1806 }, {  91,1806 }, {  92,1806 }, {  93,1806 }, {  94,1806 },
 {  95,1806 }, {  96,1806 }, {  97,1806 }, {  98,1806 }, {  99,1806 },
 { 100,1806 }, { 101,1806 }, { 102,1806 }, { 103,1806 }, { 104,1806 },
 { 105,1806 }, { 106,1806 }, { 107,1806 }, { 108,1806 }, { 109,1806 },
 { 110,1806 }, { 111,1806 }, { 112,1806 }, { 113,1806 }, { 114,1806 },
 { 115,1806 }, { 116,1806 }, { 117,1806 }, { 118,1806 }, { 119,1806 },
 { 120,1806 }, { 121,1806 }, { 122,1806 }, { 123,1806 }, { 124,1806 },

 { 125,1806 }, { 126,1806 }, { 127,1806 }, { 128,1806 }, { 129,1806 },
 { 130,1806 }, { 131,1806 }, { 132,1806 }, { 133,1806 }, { 134,1806 },
 { 135,1806 }, { 136,1806 }, { 137,1806 }, { 138,1806 }, { 139,1806 },
 { 140,1806 }, { 141,1806 }, { 142,1806 }, { 143,1806 }, { 144,1806 },
 { 145,1806 }, { 146,1806 }, { 147,1806 }, { 148,1806 }, { 149,1806 },
 { 150,1806 }, { 151,1806 }, { 152,1806 }, { 153,1806 }, { 154,1806 },
 { 155,1806 }, { 156,1806 }, { 157,1806 }, { 158,1806 }, { 159,1806 },
 { 160,1806 }, { 161,1806 }, { 162,1806 }, { 163,1806 }, { 164,1806 },
 { 165,1806 }, { 166,1806 }, { 167,1806 }, { 168,1806 }, { 169,1806 },
 { 170,1806 }, { 171,1806 }, { 172,1806 }, { 173,1806 }, { 174,1806 },

 { 175,1806 }, { 176,1806 }, { 177,1806 }, { 178,1806 }, { 179,1806 },
 { 180,1806 }, { 181,1806 }, { 182,1806 }, { 183,1806 }, { 184,1806 },
 { 185,1806 }, { 186,1806 }, { 187,1806 }, { 188,1806 }, { 189,1806 },
 { 190,1806 }, { 191,1806 }, { 192,1806 }, { 193,1806 }, { 194,1806 },
 { 195,1806 }, { 196,1806 }, { 197,1806 }, { 198,1806 }, { 199,1806 },
 { 200,1806 }, { 201,1806 }, { 202,1806 }, { 203,1806 }, { 204,1806 },
 { 205,1806 }, { 206,1806 }, { 207,1806 }, { 208,1806 }, { 209,1806 },
 { 210,1806 }, { 211,1806 }, { 212,1806 }, { 213,1806 }, { 214,1806 },
 { 215,1806 }, { 216,1806 }, { 217,1806 }, { 218,1806 }, { 219,1806 },
 { 220,1806 }, { 221,1806 }, { 222,1806 }, { 223,1806 }, { 224,1806 },

 { 225,1806 }, { 226,1806 }, { 227,1806 }, { 228,1806 }, { 229,1806 },
 { 230,1806 }, { 231,1806 }, { 232,1806 }, { 233,1806 }, { 234,1806 },
 { 235,1806 }, { 236,1806 }, { 237,1806 }, { 238,1806 }, { 239,1806 },
 { 240,1806 }, { 241,1806 }, { 242,1806 }, { 243,1806 }, { 244,1806 },
 { 245,1806 }, { 246,1806 }, { 247,1806 }, { 248,1806 }, { 249,1806 },
 { 250,1806 }, { 251,1806 }, { 252,1806 }, { 253,1806 }, { 254,1806 },
 { 255,1806 }, { 256,1806 }, {   0,   0 }, {   0,7238 }, {   1,1830 },
 {   2,1830 }, {   3,1830 }, {   4,1830 }, {   5,1830 }, {   6,1830 },
 {   7,1830 }, {   8,1830 }, {   9,1550 }, {  10,1552 }, {  11,1830 },
 {  12,1830 }, {  13,1830 }, {  14,1830 }, {  15,1830 }, {  16,1830 },

 {  17,1830 }, {  18,1830 }, {  19,1830 }, {  20,1830 }, {  21,1830 },
 {  22,1830 }, {  23,1830 }, {  24,1830 }, {  25,1830 }, {  26,1830 },
 {  27,1830 }, {  28,1830 }, {  29,1830 }, {  30,1830 }, {  31,1830 },
 {  32,1550 }, {  33,1830 }, {  34,1830 }, {  35,1830 }, {  36,2088 },
 {  37,1830 }, {  38,1830 }, {  39,1830 }, {  40,1548 }, {  41,1548 },
 {  42,2088 }, {  43,1830 }, {  44,1830 }, {  45,2212 }, {  46,1830 },
 {  47,1830 }, {  48,2088 }, {  49,2088 }, {  50,2088 }, {  51,2088 },
 {  52,2088 }, {  53,2088 }, {  54,2088 }, {  55,2088 }, {  56,2088 },
 {  57,2088 }, {  58,1830 }, {  59,1830 }, {  60,1830 }, {  61,1830 },
 {  62,1830 }, {  63,2470 }, {  64,1830 }, {  65,2088 }, {  66,2088 },

 {  67,2088 }, {  68,2088 }, {  69,2088 }, {  70,2088 }, {  71,2088 },
 {  72,2088 }, {  73,2088 }, {  74,2088 }, {  75,2088 }, {  76,2088 },
 {  77,2088 }, {  78,2088 }, {  79,2088 }, {  80,2088 }, {  81,2088 },
 {  82,2088 }, {  83,2088 }, {  84,2088 }, {  85,2088 }, {  86,2088 },
 {  87,2088 }, {  88,2088 }, {  89,2088 }, {  90,2088 }, {  91,1830 },
 {  92,1830 }, {  93,1830 }, {  94,1830 }, {  95,1830 }, {  96,1830 },
 {  97,2470 }, {  98,2470 }, {  99,2470 }, { 100,2470 }, { 101,2470 },
 { 102,2470 }, { 103,2470 }, { 104,2470 }, { 105,2470 }, { 106,2470 },
 { 107,2470 }, { 108,2470 }, { 109,2470 }, { 110,2470 }, { 111,2470 },
 { 112,2470 }, { 113,2470 }, { 114,2470 }, { 115,2470 }, { 116,2470 },

 { 117,2470 }, { 118,2470 }, { 119,2470 }, { 120,2470 }, { 121,2470 },
 { 122,2470 }, { 123,1830 }, { 124,1830 }, { 125,1830 }, { 126,1830 },
 { 127,1830 }, { 128,1830 }, { 129,1830 }, { 130,1830 }, { 131,1830 },
 { 132,1830 }, { 133,1830 }, { 134,1830 }, { 135,1830 }, { 136,1830 },
 { 137,1830 }, { 138,1830 }, { 139,1830 }, { 140,1830 }, { 141,1830 },
 { 142,1830 }, { 143,1830 }, { 144,1830 }, { 145,1830 }, { 146,1830 },
 { 147,1830 }, { 148,1830 }, { 149,1830 }, { 150,1830 }, { 151,1830 },
 { 152,1830 }, { 153,1830 }, { 154,1830 }, { 155,1830 }, { 156,1830 },
 { 157,1830 }, { 158,1830 }, { 159,1830 }, { 160,1830 }, { 161,1830 },
 { 162,1830 }, { 163,1830 }, { 164,1830 }, { 165,1830 }, { 166,1830 },

 { 167,1830 }, { 168,1830 }, { 169,1830 }, { 170,1830 }, { 171,1830 },
 { 172,1830 }, { 173,1830 }, { 174,1830 }, { 175,1830 }, { 176,1830 },
 { 177,1830 }, { 178,1830 }, { 179,1830 }, { 180,1830 }, { 181,1830 },
 { 182,1830 }, { 183,1830 }, { 184,1830 }, { 185,1830 }, { 186,1830 },
 { 187,1830 }, { 188,1830 }, { 189,1830 }, { 190,1830 }, { 191,1830 },
 { 192,1830 }, { 193,1830 }, { 194,1830 }, { 195,1830 }, { 196,1830 },
 { 197,1830 }, { 198,1830 }, { 199,1830 }, { 200,1830 }, { 201,1830 },
 { 202,1830 }, { 203,1830 }, { 204,1830 }, { 205,1830 }, { 206,1830 },
 { 207,1830 }, { 208,1830 }, { 209,1830 }, { 210,1830 }, { 211,1830 },
 { 212,1830 }, { 213,1830 }, { 214,1830 }, { 215,1830 }, { 216,1830 },

 { 217,1830 }, { 218,1830 }, { 219,1830 }, { 220,1830 }, { 221,1830 },
 { 222,1830 }, { 223,1830 }, { 224,1830 }, { 225,1830 }, { 226,1830 },
 { 227,1830 }, { 228,1830 }, { 229,1830 }, { 230,1830 }, { 231,1830 },
 { 232,1830 }, { 233,1830 }, { 234,1830 }, { 235,1830 }, { 236,1830 },
 { 237,1830 }, { 238,1830 }, { 239,1830 }, { 240,1830 }, { 241,1830 },
 { 242,1830 }, { 243,1830 }, { 244,1830 }, { 245,1830 }, { 246,1830 },
 { 247,1830 }, { 248,1830 }, { 249,1830 }, { 250,1830 }, { 251,1830 },
 { 252,1830 }, { 253,1830 }, { 254,1830 }, { 255,1830 }, { 256,1830 },
 {   0,   0 }, {   0,6980 }, {   1,1572 }, {   2,1572 }, {   3,1572 },
 {   4,1572 }, {   5,1572 }, {   6,1572 }, {   7,1572 }, {   8,1572 },

 {   9,1292 }, {  10,1294 }, {  11,1572 }, {  12,1572 }, {  13,1572 },
 {  14,1572 }, {  15,1572 }, {  16,1572 }, {  17,1572 }, {  18,1572 },
 {  19,1572 }, {  20,1572 }, {  21,1572 }, {  22,1572 }, {  23,1572 },
 {  24,1572 }, {  25,1572 }, {  26,1572 }, {  27,1572 }, {  28,1572 },
 {  29,1572 }, {  30,1572 }, {  31,1572 }, {  32,1292 }, {  33,1572 },
 {  34,1572 }, {  35,1572 }, {  36,1830 }, {  37,1572 }, {  38,1572 },
 {  39,1572 }, {  40,1290 }, {  41,1290 }, {  42,1830 }, {  43,1572 },
 {  44,1572 }, {  45,1954 }, {  46,1572 }, {  47,1572 }, {  48,1830 },
 {  49,1830 }, {  50,1830 }, {  51,1830 }, {  52,1830 }, {  53,1830 },
 {  54,1830 }, {  55,1830 }, {  56,1830 }, {  57,1830 }, {  58,1572 },

 {  59,1572 }, {  60,1572 }, {  61,1572 }, {  62,1572 }, {  63,2212 },
 {  64,1572 }, {  65,1830 }, {  66,1830 }, {  67,1830 }, {  68,1830 },
 {  69,1830 }, {  70,1830 }, {  71,1830 }, {  72,1830 }, {  73,1830 },
 {  74,1830 }, {  75,1830 }, {  76,1830 }, {  77,1830 }, {  78,1830 },
 {  79,1830 }, {  80,1830 }, {  81,1830 }, {  82,1830 }, {  83,1830 },
 {  84,1830 }, {  85,1830 }, {  86,1830 }, {  87,1830 }, {  88,1830 },
 {  89,1830 }, {  90,1830 }, {  91,1572 }, {  92,1572 }, {  93,1572 },
 {  94,1572 }, {  95,1572 }, {  96,1572 }, {  97,2212 }, {  98,2212 },
 {  99,2212 }, { 100,2212 }, { 101,2212 }, { 102,2212 }, { 103,2212 },
 { 104,2212 }, { 105,2212 }, { 106,2212 }, { 107,2212 }, { 108,2212 },

 { 109,2212 }, { 110,2212 }, { 111,2212 }, { 112,2212 }, { 113,2212 },
 { 114,2212 }, { 115,2212 }, { 116,2212 }, { 117,2212 }, { 118,2212 },
 { 119,2212 }, { 120,2212 }, { 121,2212 }, { 122,2212 }, { 123,1572 },
 { 124,1572 }, { 125,1572 }, { 126,1572 }, { 127,1572 }, { 128,1572 },
 { 129,1572 }, { 130,1572 }, { 131,1572 }, { 132,1572 }, { 133,1572 },
 { 134,1572 }, { 135,1572 }, { 136,1572 }, { 137,1572 }, { 138,1572 },
 { 139,1572 }, { 140,1572 }, { 141,1572 }, { 142,1572 }, { 143,1572 },
 { 144,1572 }, { 145,1572 }, { 146,1572 }, { 147,1572 }, { 148,1572 },
 { 149,1572 }, { 150,1572 }, { 151,1572 }, { 152,1572 }, { 153,1572 },
 { 154,1572 }, { 155,1572 }, { 156,1572 }, { 157,1572 }, { 158,1572 },

 { 159,1572 }, { 160,1572 }, { 161,1572 }, { 162,1572 }, { 163,1572 },
 { 164,1572 }, { 165,1572 }, { 166,1572 }, { 167,1572 }, { 168,1572 },
 { 169,1572 }, { 170,1572 }, { 171,1572 }, { 172,1572 }, { 173,1572 },
 { 174,1572 }, { 175,1572 }, { 176,1572 }, { 177,1572 }, { 178,1572 },
 { 179,1572 }, { 180,1572 }, { 181,1572 }, { 182,1572 }, { 183,1572 },
 { 184,1572 }, { 185,1572 }, { 186,1572 }, { 187,1572 }, { 188,1572 },
 { 189,1572 }, { 190,1572 }, { 191,1572 }, { 192,1572 }, { 193,1572 },
 { 194,1572 }, { 195,1572 }, { 196,1572 }, { 197,1572 }, { 198,1572 },
 { 199,1572 }, { 200,1572 }, { 201,1572 }, { 202,1572 }, { 203,1572 },
 { 204,1572 }, { 205,1572 }, { 206,1572 }, { 207,1572 }, { 208,1572 },

 { 209,1572 }, { 210,1572 }, { 211,1572 }, { 212,1572 }, { 213,1572 },
 { 214,1572 }, { 215,1572 }, { 216,1572 }, { 217,1572 }, { 218,1572 },
 { 219,1572 }, { 220,1572 }, { 221,1572 }, { 222,1572 }, { 223,1572 },
 { 224,1572 }, { 225,1572 }, { 226,1572 }, { 227,1572 }, { 228,1572 },
 { 229,1572 }, { 230,1572 }, { 231,1572 }, { 232,1572 }, { 233,1572 },
 { 234,1572 }, { 235,1572 }, { 236,1572 }, { 237,1572 }, { 238,1572 },
 { 239,1572 }, { 240,1572 }, { 241,1572 }, { 242,1572 }, { 243,1572 },
 { 244,1572 }, { 245,1572 }, { 246,1572 }, { 247,1572 }, { 248,1572 },
 { 249,1572 }, { 250,1572 }, { 251,1572 }, { 252,1572 }, { 253,1572 },
 { 254,1572 }, { 255,1572 }, { 256,1572 }, {   0,   0 }, {   0,6722 },

 {   1,1051 }, {   2,1051 }, {   3,1051 }, {   4,1051 }, {   5,1051 },
 {   6,1051 }, {   7,1051 }, {   8,1051 }, {   9,1051 }, {  10,1053 },
 {  11,1051 }, {  12,1051 }, {  13,1051 }, {  14,1051 }, {  15,1051 },
 {  16,1051 }, {  17,1051 }, {  18,1051 }, {  19,1051 }, {  20,1051 },
 {  21,1051 }, {  22,1051 }, {  23,1051 }, {  24,1051 }, {  25,1051 },
 {  26,1051 }, {  27,1051 }, {  28,1051 }, {  29,1051 }, {  30,1051 },
 {  31,1051 }, {  32,1051 }, {  33,1051 }, {  34,1051 }, {  35,1051 },
 {  36,1051 }, {  37,1051 }, {  38,1051 }, {  39,1051 }, {  40,1051 },
 {  41,1051 }, {  42,1051 }, {  43,2212 }, {  44,1051 }, {  45,2470 },
 {  46,1051 }, {  47,1051 }, {  48,1051 }, {  49,1051 }, {  50,1051 },

 {  51,1051 }, {  52,1051 }, {  53,1051 }, {  54,1051 }, {  55,1051 },
 {  56,1051 }, {  57,1051 }, {  58,1051 }, {  59,1051 }, {  60,1051 },
 {  61,2212 }, {  62,1051 }, {  63,1051 }, {  64,1051 }, {  65,1051 },
 {  66,1051 }, {  67,1051 }, {  68,1051 }, {  69,1051 }, {  70,1051 },
 {  71,1051 }, {  72,1051 }, {  73,1051 }, {  74,1051 }, {  75,1051 },
 {  76,1051 }, {  77,1051 }, {  78,1051 }, {  79,1051 }, {  80,1051 },
 {  81,1051 }, {  82,1051 }, {  83,1051 }, {  84,1051 }, {  85,1051 },
 {  86,1051 }, {  87,1051 }, {  88,1051 }, {  89,1051 }, {  90,1051 },
 {  91,1051 }, {  92,1051 }, {  93,1051 }, {  94,1051 }, {  95,1051 },
 {  96,1051 }, {  97,1051 }, {  98,1051 }, {  99,1051 }, { 100,1051 },

 { 101,1051 }, { 102,1051 }, { 103,1051 }, { 104,1051 }, { 105,1051 },
 { 106,1051 }, { 107,1051 }, { 108,1051 }, { 109,1051 }, { 110,1051 },
 { 111,1051 }, { 112,1051 }, { 113,1051 }, { 114,1051 }, { 115,1051 },
 { 116,1051 }, { 117,1051 }, { 118,1051 }, { 119,1051 }, { 120,1051 },
 { 121,1051 }, { 122,1051 }, { 123,1051 }, { 124,2212 }, { 125,1051 },
 { 126,1051 }, { 127,1051 }, { 128,1051 }, { 129,1051 }, { 130,1051 },
 { 131,1051 }, { 132,1051 }, { 133,1051 }, { 134,1051 }, { 135,1051 },
 { 136,1051 }, { 137,1051 }, { 138,1051 }, { 139,1051 }, { 140,1051 },
 { 141,1051 }, { 142,1051 }, { 143,1051 }, { 144,1051 }, { 145,1051 },
 { 146,1051 }, { 147,1051 }, { 148,1051 }, { 149,1051 }, { 150,1051 },

 { 151,1051 }, { 152,1051 }, { 153,1051 }, { 154,1051 }, { 155,1051 },
 { 156,1051 }, { 157,1051 }, { 158,1051 }, { 159,1051 }, { 160,1051 },
 { 161,1051 }, { 162,1051 }, { 163,1051 }, { 164,1051 }, { 165,1051 },
 { 166,1051 }, { 167,1051 }, { 168,1051 }, { 169,1051 }, { 170,1051 },
 { 171,1051 }, { 172,1051 }, { 173,1051 }, { 174,1051 }, { 175,1051 },
 { 176,1051 }, { 177,1051 }, { 178,1051 }, { 179,1051 }, { 180,1051 },
 { 181,1051 }, { 182,1051 }, { 183,1051 }, { 184,1051 }, { 185,1051 },
 { 186,1051 }, { 187,1051 }, { 188,1051 }, { 189,1051 }, { 190,1051 },
 { 191,1051 }, { 192,1051 }, { 193,1051 }, { 194,1051 }, { 195,1051 },
 { 196,1051 }, { 197,1051 }, { 198,1051 }, { 199,1051 }, { 200,1051 },

 { 201,1051 }, { 202,1051 }, { 203,1051 }, { 204,1051 }, { 205,1051 },
 { 206,1051 }, { 207,1051 }, { 208,1051 }, { 209,1051 }, { 210,1051 },
 { 211,1051 }, { 212,1051 }, { 213,1051 }, { 214,1051 }, { 215,1051 },
 { 216,1051 }, { 217,1051 }, { 218,1051 }, { 219,1051 }, { 220,1051 },
 { 221,1051 }, { 222,1051 }, { 223,1051 }, { 224,1051 }, { 225,1051 },
 { 226,1051 }, { 227,1051 }, { 228,1051 }, { 229,1051 }, { 230,1051 },
 { 231,1051 }, { 232,1051 }, { 233,1051 }, { 234,1051 }, { 235,1051 },
 { 236,1051 }, { 237,1051 }, { 238,1051 }, { 239,1051 }, { 240,1051 },
 { 241,1051 }, { 242,1051 }, { 243,1051 }, { 244,1051 }, { 245,1051 },
 { 246,1051 }, { 247,1051 }, { 248,1051 }, { 249,1051 }, { 250,1051 },

 { 251,1051 }, { 252,1051 }, { 253,1051 }, { 254,1051 }, { 255,1051 },
 { 256,1051 }, {   0,   0 }, {   0,6464 }, {   1, 793 }, {   2, 793 },
 {   3, 793 }, {   4, 793 }, {   5, 793 }, {   6, 793 }, {   7, 793 },
 {   8, 793 }, {   9, 793 }, {  10, 795 }, {  11, 793 }, {  12, 793 },
 {  13, 793 }, {  14, 793 }, {  15, 793 }, {  16, 793 }, {  17, 793 },
 {  18, 793 }, {  19, 793 }, {  20, 793 }, {  21, 793 }, {  22, 793 },
 {  23, 793 }, {  24, 793 }, {  25, 793 }, {  26, 793 }, {  27, 793 },
 {  28, 793 }, {  29, 793 }, {  30, 793 }, {  31, 793 }, {  32, 793 },
 {  33, 793 }, {  34, 793 }, {  35, 793 }, {  36, 793 }, {  37, 793 },
 {  38, 793 }, {  39, 793 }, {  40, 793 }, {  41, 793 }, {  42, 793 },

 {  43,1954 }, {  44, 793 }, {  45,2212 }, {  46, 793 }, {  47, 793 },
 {  48, 793 }, {  49, 793 }, {  50, 793 }, {  51, 793 }, {  52, 793 },
 {  53, 793 }, {  54, 793 }, {  55, 793 }, {  56, 793 }, {  57, 793 },
 {  58, 793 }, {  59, 793 }, {  60, 793 }, {  61,1954 }, {  62, 793 },
 {  63, 793 }, {  64, 793 }, {  65, 793 }, {  66, 793 }, {  67, 793 },
 {  68, 793 }, {  69, 793 }, {  70, 793 }, {  71, 793 }, {  72, 793 },
 {  73, 793 }, {  74, 793 }, {  75, 793 }, {  76, 793 }, {  77, 793 },
 {  78, 793 }, {  79, 793 }, {  80, 793 }, {  81, 793 }, {  82, 793 },
 {  83, 793 }, {  84, 793 }, {  85, 793 }, {  86, 793 }, {  87, 793 },
 {  88, 793 }, {  89, 793 }, {  90, 793 }, {  91, 793 }, {  92, 793 },

 {  93, 793 }, {  94, 793 }, {  95, 793 }, {  96, 793 }, {  97, 793 },
 {  98, 793 }, {  99, 793 }, { 100, 793 }, { 101, 793 }, { 102, 793 },
 { 103, 793 }, { 104, 793 }, { 105, 793 }, { 106, 793 }, { 107, 793 },
 { 108, 793 }, { 109, 793 }, { 110, 793 }, { 111, 793 }, { 112, 793 },
 { 113, 793 }, { 114, 793 }, { 115, 793 }, { 116, 793 }, { 117, 793 },
 { 118, 793 }, { 119, 793 }, { 120, 793 }, { 121, 793 }, { 122, 793 },
 { 123, 793 }, { 124,1954 }, { 125, 793 }, { 126, 793 }, { 127, 793 },
 { 128, 793 }, { 129, 793 }, { 130, 793 }, { 131, 793 }, { 132, 793 },
 { 133, 793 }, { 134, 793 }, { 135, 793 }, { 136, 793 }, { 137, 793 },
 { 138, 793 }, { 139, 793 }, { 140, 793 }, { 141, 793 }, { 142, 793 },

 { 143, 793 }, { 144, 793 }, { 145, 793 }, { 146, 793 }, { 147, 793 },
 { 148, 793 }, { 149, 793 }, { 150, 793 }, { 151, 793 }, { 152, 793 },
 { 153, 793 }, { 154, 793 }, { 155, 793 }, { 156, 793 }, { 157, 793 },
 { 158, 793 }, { 159, 793 }, { 160, 793 }, { 161, 793 }, { 162, 793 },
 { 163, 793 }, { 164, 793 }, { 165, 793 }, { 166, 793 }, { 167, 793 },
 { 168, 793 }, { 169, 793 }, { 170, 793 }, { 171, 793 }, { 172, 793 },
 { 173, 793 }, { 174, 793 }, { 175, 793 }, { 176, 793 }, { 177, 793 },
 { 178, 793 }, { 179, 793 }, { 180, 793 }, { 181, 793 }, { 182, 793 },
 { 183, 793 }, { 184, 793 }, { 185, 793 }, { 186, 793 }, { 187, 793 },
 { 188, 793 }, { 189, 793 }, { 190, 793 }, { 191, 793 }, { 192, 793 },

 { 193, 793 }, { 194, 793 }, { 195, 793 }, { 196, 793 }, { 197, 793 },
 { 198, 793 }, { 199, 793 }, { 200, 793 }, { 201, 793 }, { 202, 793 },
 { 203, 793 }, { 204, 793 }, { 205, 793 }, { 206, 793 }, { 207, 793 },
 { 208, 793 }, { 209, 793 }, { 210, 793 }, { 211, 793 }, { 212, 793 },
 { 213, 793 }, { 214, 793 }, { 215, 793 }, { 216, 793 }, { 217, 793 },
 { 218, 793 }, { 219, 793 }, { 220, 793 }, { 221, 793 }, { 222, 793 },
 { 223, 793 }, { 224, 793 }, { 225, 793 }, { 226, 793 }, { 227, 793 },
 { 228, 793 }, { 229, 793 }, { 230, 793 }, { 231, 793 }, { 232, 793 },
 { 233, 793 }, { 234, 793 }, { 235, 793 }, { 236, 793 }, { 237, 793 },
 { 238, 793 }, { 239, 793 }, { 240, 793 }, { 241, 793 }, { 242, 793 },

 { 243, 793 }, { 244, 793 }, { 245, 793 }, { 246, 793 }, { 247, 793 },
 { 248, 793 }, { 249, 793 }, { 250, 793 }, { 251, 793 }, { 252, 793 },
 { 253, 793 }, { 254, 793 }, { 255, 793 }, { 256, 793 }, {   0,   0 },
 {   0,6206 }, {   1, 516 }, {   2, 516 }, {   3, 516 }, {   4, 516 },
 {   5, 516 }, {   6, 516 }, {   7, 516 }, {   8, 516 }, {   9, 518 },
 {  10, 520 }, {  11, 516 }, {  12, 516 }, {  13, 516 }, {  14, 516 },
 {  15, 516 }, {  16, 516 }, {  17, 516 }, {  18, 516 }, {  19, 516 },
 {  20, 516 }, {  21, 516 }, {  22, 516 }, {  23, 516 }, {  24, 516 },
 {  25, 516 }, {  26, 516 }, {  27, 516 }, {  28, 516 }, {  29, 516 },
 {  30, 516 }, {  31, 516 }, {  32, 518 }, {  33, 516 }, {  34, 516 },

 {  35, 516 }, {  36, 516 }, {  37, 516 }, {  38, 516 }, {  39, 516 },
 {  40, 516 }, {  41, 516 }, {  42, 516 }, {  43, 516 }, {  44, 516 },
 {  45, 516 }, {  46, 516 }, {  47, 516 }, {  48, 516 }, {  49, 516 },
 {  50, 516 }, {  51, 516 }, {  52, 516 }, {  53, 516 }, {  54, 516 },
 {  55, 516 }, {  56, 516 }, {  57, 516 }, {  58, 516 }, {  59, 516 },
 {  60, 516 }, {  61, 516 }, {  62, 516 }, {  63, 516 }, {  64, 516 },
 {  65, 516 }, {  66, 516 }, {  67, 516 }, {  68, 516 }, {  69, 516 },
 {  70, 516 }, {  71, 516 }, {  72, 516 }, {  73, 516 }, {  74, 516 },
 {  75, 516 }, {  76, 516 }, {  77, 516 }, {  78, 516 }, {  79, 516 },
 {  80, 516 }, {  81, 516 }, {  82, 516 }, {  83, 516 }, {  84, 516 },

 {  85, 516 }, {  86, 516 }, {  87, 516 }, {  88, 516 }, {  89, 516 },
 {  90, 516 }, {  91, 516 }, {  92, 516 }, {  93, 516 }, {  94, 516 },
 {  95, 516 }, {  96, 516 }, {  97, 516 }, {  98, 516 }, {  99, 516 },
 { 100, 516 }, { 101, 516 }, { 102, 516 }, { 103, 516 }, { 104, 516 },
 { 105, 516 }, { 106, 516 }, { 107, 516 }, { 108, 516 }, { 109, 516 },
 { 110, 516 }, { 111, 516 }, { 112, 516 }, { 113, 516 }, { 114, 516 },
 { 115, 516 }, { 116, 516 }, { 117, 516 }, { 118, 516 }, { 119, 516 },
 { 120, 516 }, { 121, 516 }, { 122, 516 }, { 123, 516 }, { 124, 516 },
 { 125, 516 }, { 126, 516 }, { 127, 516 }, { 128, 516 }, { 129, 516 },
 { 130, 516 }, { 131, 516 }, { 132, 516 }, { 133, 516 }, { 134, 516 },

 { 135, 516 }, { 136, 516 }, { 137, 516 }, { 138, 516 }, { 139, 516 },
 { 140, 516 }, { 141, 516 }, { 142, 516 }, { 143, 516 }, { 144, 516 },
 { 145, 516 }, { 146, 516 }, { 147, 516 }, { 148, 516 }, { 149, 516 },
 { 150, 516 }, { 151, 516 }, { 152, 516 }, { 153, 516 }, { 154, 516 },
 { 155, 516 }, { 156, 516 }, { 157, 516 }, { 158, 516 }, { 159, 516 },
 { 160, 516 }, { 161, 516 }, { 162, 516 }, { 163, 516 }, { 164, 516 },
 { 165, 516 }, { 166, 516 }, { 167, 516 }, { 168, 516 }, { 169, 516 },
 { 170, 516 }, { 171, 516 }, { 172, 516 }, { 173, 516 }, { 174, 516 },
 { 175, 516 }, { 176, 516 }, { 177, 516 }, { 178, 516 }, { 179, 516 },
 { 180, 516 }, { 181, 516 }, { 182, 516 }, { 183, 516 }, { 184, 516 },

 { 185, 516 }, { 186, 516 }, { 187, 516 }, { 188, 516 }, { 189, 516 },
 { 190, 516 }, { 191, 516 }, { 192, 516 }, { 193, 516 }, { 194, 516 },
 { 195, 516 }, { 196, 516 }, { 197, 516 }, { 198, 516 }, { 199, 516 },
 { 200, 516 }, { 201, 516 }, { 202, 516 }, { 203, 516 }, { 204, 516 },
 { 205, 516 }, { 206, 516 }, { 207, 516 }, { 208, 516 }, { 209, 516 },
 { 210, 516 }, { 211, 516 }, { 212, 516 }, { 213, 516 }, { 214, 516 },
 { 215, 516 }, { 216, 516 }, { 217, 516 }, { 218, 516 }, { 219, 516 },
 { 220, 516 }, { 221, 516 }, { 222, 516 }, { 223, 516 }, { 224, 516 },
 { 225, 516 }, { 226, 516 }, { 227, 516 }, { 228, 516 }, { 229, 516 },
 { 230, 516 }, { 231, 516 }, { 232, 516 }, { 233, 516 }, { 234, 516 },

 { 235, 516 }, { 236, 516 }, { 237, 516 }, { 238, 516 }, { 239, 516 },
 { 240, 516 }, { 241, 516 }, { 242, 516 }, { 243, 516 }, { 244, 516 },
 { 245, 516 }, { 246, 516 }, { 247, 516 }, { 248, 516 }, { 249, 516 },
 { 250, 516 }, { 251, 516 }, { 252, 516 }, { 253, 516 }, { 254, 516 },
 { 255, 516 }, { 256, 516 }, {   0,   0 }, {   0,5948 }, {   1, 258 },
 {   2, 258 }, {   3, 258 }, {   4, 258 }, {   5, 258 }, {   6, 258 },
 {   7, 258 }, {   8, 258 }, {   9, 260 }, {  10, 262 }, {  11, 258 },
 {  12, 258 }, {  13, 258 }, {  14, 258 }, {  15, 258 }, {  16, 258 },
 {  17, 258 }, {  18, 258 }, {  19, 258 }, {  20, 258 }, {  21, 258 },
 {  22, 258 }, {  23, 258 }, {  24, 258 }, {  25, 258 }, {  26, 258 },

 {  27, 258 }, {  28, 258 }, {  29, 258 }, {  30, 258 }, {  31, 258 },
 {  32, 260 }, {  33, 258 }, {  34, 258 }, {  35, 258 }, {  36, 258 },
 {  37, 258 }, {  38, 258 }, {  39, 258 }, {  40, 258 }, {  41, 258 },
 {  42, 258 }, {  43, 258 }, {  44, 258 }, {  45, 258 }, {  46, 258 },
 {  47, 258 }, {  48, 258 }, {  49, 258 }, {  50, 258 }, {  51, 258 },
 {  52, 258 }, {  53, 258 }, {  54, 258 }, {  55, 258 }, {  56, 258 },
 {  57, 258 }, {  58, 258 }, {  59, 258 }, {  60, 258 }, {  61, 258 },
 {  62, 258 }, {  63, 258 }, {  64, 258 }, {  65, 258 }, {  66, 258 },
 {  67, 258 }, {  68, 258 }, {  69, 258 }, {  70, 258 }, {  71, 258 },
 {  72, 258 }, {  73, 258 }, {  74, 258 }, {  75, 258 }, {  76, 258 },

 {  77, 258 }, {  78, 258 }, {  79, 258 }, {  80, 258 }, {  81, 258 },
 {  82, 258 }, {  83, 258 }, {  84, 258 }, {  85, 258 }, {  86, 258 },
 {  87, 258 }, {  88, 258 }, {  89, 258 }, {  90, 258 }, {  91, 258 },
 {  92, 258 }, {  93, 258 }, {  94, 258 }, {  95, 258 }, {  96, 258 },
 {  97, 258 }, {  98, 258 }, {  99, 258 }, { 100, 258 }, { 101, 258 },
 { 102, 258 }, { 103, 258 }, { 104, 258 }, { 105, 258 }, { 106, 258 },
 { 107, 258 }, { 108, 258 }, { 109, 258 }, { 110, 258 }, { 111, 258 },
 { 112, 258 }, { 113, 258 }, { 114, 258 }, { 115, 258 }, { 116, 258 },
 { 117, 258 }, { 118, 258 }, { 119, 258 }, { 120, 258 }, { 121, 258 },
 { 122, 258 }, { 123, 258 }, { 124, 258 }, { 125, 258 }, { 126, 258 },

 { 127, 258 }, { 128, 258 }, { 129, 258 }, { 130, 258 }, { 131, 258 },
 { 132, 258 }, { 133, 258 }, { 134, 258 }, { 135, 258 }, { 136, 258 },
 { 137, 258 }, { 138, 258 }, { 139, 258 }, { 140, 258 }, { 141, 258 },
 { 142, 258 }, { 143, 258 }, { 144, 258 }, { 145, 258 }, { 146, 258 },
 { 147, 258 }, { 148, 258 }, { 149, 258 }, { 150, 258 }, { 151, 258 },
 { 152, 258 }, { 153, 258 }, { 154, 258 }, { 155, 258 }, { 156, 258 },
 { 157, 258 }, { 158, 258 }, { 159, 258 }, { 160, 258 }, { 161, 258 },
 { 162, 258 }, { 163, 258 }, { 164, 258 }, { 165, 258 }, { 166, 258 },
 { 167, 258 }, { 168, 258 }, { 169, 258 }, { 170, 258 }, { 171, 258 },
 { 172, 258 }, { 173, 258 }, { 174, 258 }, { 175, 258 }, { 176, 258 },

 { 177, 258 }, { 178, 258 }, { 179, 258 }, { 180, 258 }, { 181, 258 },
 { 182, 258 }, { 183, 258 }, { 184, 258 }, { 185, 258 }, { 186, 258 },
 { 187, 258 }, { 188, 258 }, { 189, 258 }, { 190, 258 }, { 191, 258 },
 { 192, 258 }, { 193, 258 }, { 194, 258 }, { 195, 258 }, { 196, 258 },
 { 197, 258 }, { 198, 258 }, { 199, 258 }, { 200, 258 }, { 201, 258 },
 { 202, 258 }, { 203, 258 }, { 204, 258 }, { 205, 258 }, { 206, 258 },
 { 207, 258 }, { 208, 258 }, { 209, 258 }, { 210, 258 }, { 211, 258 },
 { 212, 258 }, { 213, 258 }, { 214, 258 }, { 215, 258 }, { 216, 258 },
 { 217, 258 }, { 218, 258 }, { 219, 258 }, { 220, 258 }, { 221, 258 },
 { 222, 258 }, { 223, 258 }, { 224, 258 }, { 225, 258 }, { 226, 258 },

 { 227, 258 }, { 228, 258 }, { 229, 258 }, { 230, 258 }, { 231, 258 },
 { 232, 258 }, { 233, 258 }, { 234, 258 }, { 235, 258 }, { 236, 258 },
 { 237, 258 }, { 238, 258 }, { 239, 258 }, { 240, 258 }, { 241, 258 },
 { 242, 258 }, { 243, 258 }, { 244, 258 }, { 245, 258 }, { 246, 258 },
 { 247, 258 }, { 248, 258 }, { 249, 258 }, { 250, 258 }, { 251, 258 },
 { 252, 258 }, { 253, 258 }, { 254, 258 }, { 255, 258 }, { 256, 258 },
 {   0,  17 }, {   0,5690 }, {   0,  15 }, {   0,5688 }, {   0,  16 },
 {   0,5686 }, {   0,   1 }, {   0,5684 }, {   0,   2 }, {   0,5682 },
 {   0,   3 }, {   0,5680 }, {   9, 540 }, {   0,   5 }, {   0,5677 },
 {   0,   7 }, {   0,5675 }, {   0,   6 }, {   0,5673 }, {   0,  14 },

 {   0,5671 }, {   0,  18 }, {   0,5669 }, {   0,   0 }, {   0,   4 },
 {   0,5666 }, {   1,1672 }, {   2,1672 }, {   3,1672 }, {   4,1672 },
 {   5,1672 }, {   6,1672 }, {   7,1672 }, {   8,1672 }, {   0,   0 },
 {  32, 540 }, {  11,1672 }, {  12,1672 }, {  13,1672 }, {  14,1672 },
 {  15,1672 }, {  16,1672 }, {  17,1672 }, {  18,1672 }, {  19,1672 },
 {  20,1672 }, {  21,1672 }, {  22,1672 }, {  23,1672 }, {  24,1672 },
 {  25,1672 }, {  26,1672 }, {  27,1672 }, {  28,1672 }, {  29,1672 },
 {  30,1672 }, {  31,1672 }, {   0,   0 }, {  33,1672 }, {  34,1672 },
 {  35,1672 }, {  36,1672 }, {  37,1672 }, {  38,1672 }, {  39,1672 },
 {   0,   0 }, {   0,   0 }, {  42,1672 }, {  43,1672 }, {  44,1672 },

 {  45,1672 }, {  46,1672 }, {  47,1672 }, {  48,1672 }, {  49,1672 },
 {  50,1672 }, {  51,1672 }, {  52,1672 }, {  53,1672 }, {  54,1672 },
 {  55,1672 }, {  56,1672 }, {  57,1672 }, {  58,1672 }, {  59,1672 },
 {  60,1672 }, {  61,1672 }, {  62,1672 }, {  63,1672 }, {  64,1672 },
 {  65,1672 }, {  66,1672 }, {  67,1672 }, {  68,1672 }, {  69,1672 },
 {  70,1672 }, {  71,1672 }, {  72,1672 }, {  73,1672 }, {  74,1672 },
 {  75,1672 }, {  76,1672 }, {  77,1672 }, {  78,1672 }, {  79,1672 },
 {  80,1672 }, {  81,1672 }, {  82,1672 }, {  83,1672 }, {  84,1672 },
 {  85,1672 }, {  86,1672 }, {  87,1672 }, {  88,1672 }, {  89,1672 },
 {  90,1672 }, {  91,1672 }, {  92,1672 }, {  93,1672 }, {  94,1672 },

 {  95,1672 }, {  96,1672 }, {  97,1672 }, {  98,1672 }, {  99,1672 },
 { 100,1672 }, { 101,1672 }, { 102,1672 }, { 103,1672 }, { 104,1672 },
 { 105,1672 }, { 106,1672 }, { 107,1672 }, { 108,1672 }, { 109,1672 },
 { 110,1672 }, { 111,1672 }, { 112,1672 }, { 113,1672 }, { 114,1672 },
 { 115,1672 }, { 116,1672 }, { 117,1672 }, { 118,1672 }, { 119,1672 },
 { 120,1672 }, { 121,1672 }, { 122,1672 }, { 123,1672 }, { 124,1672 },
 { 125,1672 }, { 126,1672 }, { 127,1672 }, { 128,1672 }, { 129,1672 },
 { 130,1672 }, { 131,1672 }, { 132,1672 }, { 133,1672 }, { 134,1672 },
 { 135,1672 }, { 136,1672 }, { 137,1672 }, { 138,1672 }, { 139,1672 },
 { 140,1672 }, { 141,1672 }, { 142,1672 }, { 143,1672 }, { 144,1672 },

 { 145,1672 }, { 146,1672 }, { 147,1672 }, { 148,1672 }, { 149,1672 },
 { 150,1672 }, { 151,1672 }, { 152,1672 }, { 153,1672 }, { 154,1672 },
 { 155,1672 }, { 156,1672 }, { 157,1672 }, { 158,1672 }, { 159,1672 },
 { 160,1672 }, { 161,1672 }, { 162,1672 }, { 163,1672 }, { 164,1672 },
 { 165,1672 }, { 166,1672 }, { 167,1672 }, { 168,1672 }, { 169,1672 },
 { 170,1672 }, { 171,1672 }, { 172,1672 }, { 173,1672 }, { 174,1672 },
 { 175,1672 }, { 176,1672 }, { 177,1672 }, { 178,1672 }, { 179,1672 },
 { 180,1672 }, { 181,1672 }, { 182,1672 }, { 183,1672 }, { 184,1672 },
 { 185,1672 }, { 186,1672 }, { 187,1672 }, { 188,1672 }, { 189,1672 },
 { 190,1672 }, { 191,1672 }, { 192,1672 }, { 193,1672 }, { 194,1672 },

 { 195,1672 }, { 196,1672 }, { 197,1672 }, { 198,1672 }, { 199,1672 },
 { 200,1672 }, { 201,1672 }, { 202,1672 }, { 203,1672 }, { 204,1672 },
 { 205,1672 }, { 206,1672 }, { 207,1672 }, { 208,1672 }, { 209,1672 },
 { 210,1672 }, { 211,1672 }, { 212,1672 }, { 213,1672 }, { 214,1672 },
 { 215,1672 }, { 216,1672 }, { 217,1672 }, { 218,1672 }, { 219,1672 },
 { 220,1672 }, { 221,1672 }, { 222,1672 }, { 223,1672 }, { 224,1672 },
 { 225,1672 }, { 226,1672 }, { 227,1672 }, { 228,1672 }, { 229,1672 },
 { 230,1672 }, { 231,1672 }, { 232,1672 }, { 233,1672 }, { 234,1672 },
 { 235,1672 }, { 236,1672 }, { 237,1672 }, { 238,1672 }, { 239,1672 },
 { 240,1672 }, { 241,1672 }, { 242,1672 }, { 243,1672 }, { 244,1672 },

 { 245,1672 }, { 246,1672 }, { 247,1672 }, { 248,1672 }, { 249,1672 },
 { 250,1672 }, { 251,1672 }, { 252,1672 }, { 253,1672 }, { 254,1672 },
 { 255,1672 }, { 256,1672 }, {   0,  10 }, {   0,5408 }, {   1,1672 },
 {   2,1672 }, {   3,1672 }, {   4,1672 }, {   5,1672 }, {   6,1672 },
 {   7,1672 }, {   8,1672 }, {   0,   0 }, {   0,   0 }, {  11,1672 },
 {  12,1672 }, {  13,1672 }, {  14,1672 }, {  15,1672 }, {  16,1672 },
 {  17,1672 }, {  18,1672 }, {  19,1672 }, {  20,1672 }, {  21,1672 },
 {  22,1672 }, {  23,1672 }, {  24,1672 }, {  25,1672 }, {  26,1672 },
 {  27,1672 }, {  28,1672 }, {  29,1672 }, {  30,1672 }, {  31,1672 },
 {   0,   0 }, {  33,1672 }, {  34,1672 }, {  35,1672 }, {  36,1672 },

 {  37,1672 }, {  38,1672 }, {  39,1672 }, {   0,   0 }, {   0,   0 },
 {  42,1672 }, {  43,1672 }, {  44,1672 }, {  45,1672 }, {  46,1672 },
 {  47,1672 }, {  48,1672 }, {  49,1672 }, {  50,1672 }, {  51,1672 },
 {  52,1672 }, {  53,1672 }, {  54,1672 }, {  55,1672 }, {  56,1672 },
 {  57,1672 }, {  58,1672 }, {  59,1672 }, {  60,1672 }, {  61,1672 },
 {  62,1672 }, {  63,1672 }, {  64,1672 }, {  65,1672 }, {  66,1672 },
 {  67,1672 }, {  68,1672 }, {  69,1672 }, {  70,1672 }, {  71,1672 },
 {  72,1672 }, {  73,1672 }, {  74,1672 }, {  75,1672 }, {  76,1672 },
 {  77,1672 }, {  78,1672 }, {  79,1672 }, {  80,1672 }, {  81,1672 },
 {  82,1672 }, {  83,1672 }, {  84,1672 }, {  85,1672 }, {  86,1672 },

 {  87,1672 }, {  88,1672 }, {  89,1672 }, {  90,1672 }, {  91,1672 },
 {  92,1672 }, {  93,1672 }, {  94,1672 }, {  95,1672 }, {  96,1672 },
 {  97,1672 }, {  98,1672 }, {  99,1672 }, { 100,1672 }, { 101,1672 },
 { 102,1672 }, { 103,1672 }, { 104,1672 }, { 105,1672 }, { 106,1672 },
 { 107,1672 }, { 108,1672 }, { 109,1672 }, { 110,1672 }, { 111,1672 },
 { 112,1672 }, { 113,1672 }, { 114,1672 }, { 115,1672 }, { 116,1672 },
 { 117,1672 }, { 118,1672 }, { 119,1672 }, { 120,1672 }, { 121,1672 },
 { 122,1672 }, { 123,1672 }, { 124,1672 }, { 125,1672 }, { 126,1672 },
 { 127,1672 }, { 128,1672 }, { 129,1672 }, { 130,1672 }, { 131,1672 },
 { 132,1672 }, { 133,1672 }, { 134,1672 }, { 135,1672 }, { 136,1672 },

 { 137,1672 }, { 138,1672 }, { 139,1672 }, { 140,1672 }, { 141,1672 },
 { 142,1672 }, { 143,1672 }, { 144,1672 }, { 145,1672 }, { 146,1672 },
 { 147,1672 }, { 148,1672 }, { 149,1672 }, { 150,1672 }, { 151,1672 },
 { 152,1672 }, { 153,1672 }, { 154,1672 }, { 155,1672 }, { 156,1672 },
 { 157,1672 }, { 158,1672 }, { 159,1672 }, { 160,1672 }, { 161,1672 },
 { 162,1672 }, { 163,1672 }, { 164,1672 }, { 165,1672 }, { 166,1672 },
 { 167,1672 }, { 168,1672 }, { 169,1672 }, { 170,1672 }, { 171,1672 },
 { 172,1672 }, { 173,1672 }, { 174,1672 }, { 175,1672 }, { 176,1672 },
 { 177,1672 }, { 178,1672 }, { 179,1672 }, { 180,1672 }, { 181,1672 },
 { 182,1672 }, { 183,1672 }, { 184,1672 }, { 185,1672 }, { 186,1672 },

 { 187,1672 }, { 188,1672 }, { 189,1672 }, { 190,1672 }, { 191,1672 },
 { 192,1672 }, { 193,1672 }, { 194,1672 }, { 195,1672 }, { 196,1672 },
 { 197,1672 }, { 198,1672 }, { 199,1672 }, { 200,1672 }, { 201,1672 },
 { 202,1672 }, { 203,1672 }, { 204,1672 }, { 205,1672 }, { 206,1672 },
 { 207,1672 }, { 208,1672 }, { 209,1672 }, { 210,1672 }, { 211,1672 },
 { 212,1672 }, { 213,1672 }, { 214,1672 }, { 215,1672 }, { 216,1672 },
 { 217,1672 }, { 218,1672 }, { 219,1672 }, { 220,1672 }, { 221,1672 },
 { 222,1672 }, { 223,1672 }, { 224,1672 }, { 225,1672 }, { 226,1672 },
 { 227,1672 }, { 228,1672 }, { 229,1672 }, { 230,1672 }, { 231,1672 },
 { 232,1672 }, { 233,1672 }, { 234,1672 }, { 235,1672 }, { 236,1672 },

 { 237,1672 }, { 238,1672 }, { 239,1672 }, { 240,1672 }, { 241,1672 },
 { 242,1672 }, { 243,1672 }, { 244,1672 }, { 245,1672 }, { 246,1672 },
 { 247,1672 }, { 248,1672 }, { 249,1672 }, { 250,1672 }, { 251,1672 },
 { 252,1672 }, { 253,1672 }, { 254,1672 }, { 255,1672 }, { 256,1672 },
 {   0,   9 }, {   0,5150 }, {   0,  15 }, {   0,5148 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   9,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32,   0 }, {   0,   0 }, {  36,1672 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  42,1672 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  46,1796 }, {   0,   0 }, {  48,1672 },
 {  49,1672 }, {  50,1672 }, {  51,1672 }, {  52,1672 }, {  53,1672 },
 {  54,1672 }, {  55,1672 }, {  56,1672 }, {  57,1672 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  63,1672 },
 {   0,   0 }, {  65,1672 }, {  66,1672 }, {  67,1672 }, {  68,1672 },
 {  69,1672 }, {  70,1672 }, {  71,1672 }, {  72,1672 }, {  73,1672 },
 {  74,1672 }, {  75,1672 }, {  76,1672 }, {  77,1672 }, {  78,1672 },

 {  79,1672 }, {  80,1672 }, {  81,1672 }, {  82,1672 }, {  83,1672 },
 {  84,1672 }, {  85,1672 }, {  86,1672 }, {  87,1672 }, {  88,1672 },
 {  89,1672 }, {  90,1672 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,1672 }, {  98,1672 },
 {  99,1672 }, { 100,1672 }, { 101,1672 }, { 102,1672 }, { 103,1672 },
 { 104,1672 }, { 105,1672 }, { 106,1672 }, { 107,1672 }, { 108,1672 },
 { 109,1672 }, { 110,1672 }, { 111,1672 }, { 112,1672 }, { 113,1672 },
 { 114,1672 }, { 115,1672 }, { 116,1672 }, { 117,1672 }, { 118,1672 },
 { 119,1672 }, { 120,1672 }, { 121,1672 }, { 122,1672 }, {   0,  10 },
 {   0,5026 }, {   1,1290 }, {   2,1290 }, {   3,1290 }, {   4,1290 },

 {   5,1290 }, {   6,1290 }, {   7,1290 }, {   8,1290 }, {   0,   0 },
 {   0,   0 }, {  11,1290 }, {  12,1290 }, {  13,1290 }, {  14,1290 },
 {  15,1290 }, {  16,1290 }, {  17,1290 }, {  18,1290 }, {  19,1290 },
 {  20,1290 }, {  21,1290 }, {  22,1290 }, {  23,1290 }, {  24,1290 },
 {  25,1290 }, {  26,1290 }, {  27,1290 }, {  28,1290 }, {  29,1290 },
 {  30,1290 }, {  31,1290 }, {   0,   0 }, {  33,1290 }, {  34,1290 },
 {  35,1290 }, {  36,1290 }, {  37,1290 }, {  38,1290 }, {  39,1290 },
 {   0,   0 }, {   0,   0 }, {  42,1290 }, {  43,1290 }, {  44,1290 },
 {  45,1290 }, {  46,1290 }, {  47,1290 }, {  48,1290 }, {  49,1290 },
 {  50,1290 }, {  51,1290 }, {  52,1290 }, {  53,1290 }, {  54,1290 },

 {  55,1290 }, {  56,1290 }, {  57,1290 }, {  58,1290 }, {  59,1290 },
 {  60,1290 }, {  61,1290 }, {  62,1290 }, {  63,1290 }, {  64,1290 },
 {  65,1290 }, {  66,1290 }, {  67,1290 }, {  68,1290 }, {  69,1290 },
 {  70,1290 }, {  71,1290 }, {  72,1290 }, {  73,1290 }, {  74,1290 },
 {  75,1290 }, {  76,1290 }, {  77,1290 }, {  78,1930 }, {  79,1290 },
 {  80,1290 }, {  81,1290 }, {  82,1290 }, {  83,1290 }, {  84,1290 },
 {  85,1290 }, {  86,1290 }, {  87,1290 }, {  88,1290 }, {  89,1290 },
 {  90,1290 }, {  91,1290 }, {  92,1290 }, {  93,1290 }, {  94,1290 },
 {  95,1290 }, {  96,1290 }, {  97,1290 }, {  98,1290 }, {  99,1290 },
 { 100,1290 }, { 101,1290 }, { 102,1290 }, { 103,1290 }, { 104,1290 },

 { 105,1290 }, { 106,1290 }, { 107,1290 }, { 108,1290 }, { 109,1290 },
 { 110,1290 }, { 111,1290 }, { 112,1290 }, { 113,1290 }, { 114,1290 },
 { 115,1290 }, { 116,1290 }, { 117,1290 }, { 118,1290 }, { 119,1290 },
 { 120,1290 }, { 121,1290 }, { 122,1290 }, { 123,1290 }, { 124,1290 },
 { 125,1290 }, { 126,1290 }, { 127,1290 }, { 128,1290 }, { 129,1290 },
 { 130,1290 }, { 131,1290 }, { 132,1290 }, { 133,1290 }, { 134,1290 },
 { 135,1290 }, { 136,1290 }, { 137,1290 }, { 138,1290 }, { 139,1290 },
 { 140,1290 }, { 141,1290 }, { 142,1290 }, { 143,1290 }, { 144,1290 },
 { 145,1290 }, { 146,1290 }, { 147,1290 }, { 148,1290 }, { 149,1290 },
 { 150,1290 }, { 151,1290 }, { 152,1290 }, { 153,1290 }, { 154,1290 },

 { 155,1290 }, { 156,1290 }, { 157,1290 }, { 158,1290 }, { 159,1290 },
 { 160,1290 }, { 161,1290 }, { 162,1290 }, { 163,1290 }, { 164,1290 },
 { 165,1290 }, { 166,1290 }, { 167,1290 }, { 168,1290 }, { 169,1290 },
 { 170,1290 }, { 171,1290 }, { 172,1290 }, { 173,1290 }, { 174,1290 },
 { 175,1290 }, { 176,1290 }, { 177,1290 }, { 178,1290 }, { 179,1290 },
 { 180,1290 }, { 181,1290 }, { 182,1290 }, { 183,1290 }, { 184,1290 },
 { 185,1290 }, { 186,1290 }, { 187,1290 }, { 188,1290 }, { 189,1290 },
 { 190,1290 }, { 191,1290 }, { 192,1290 }, { 193,1290 }, { 194,1290 },
 { 195,1290 }, { 196,1290 }, { 197,1290 }, { 198,1290 }, { 199,1290 },
 { 200,1290 }, { 201,1290 }, { 202,1290 }, { 203,1290 }, { 204,1290 },

 { 205,1290 }, { 206,1290 }, { 207,1290 }, { 208,1290 }, { 209,1290 },
 { 210,1290 }, { 211,1290 }, { 212,1290 }, { 213,1290 }, { 214,1290 },
 { 215,1290 }, { 216,1290 }, { 217,1290 }, { 218,1290 }, { 219,1290 },
 { 220,1290 }, { 221,1290 }, { 222,1290 }, { 223,1290 }, { 224,1290 },
 { 225,1290 }, { 226,1290 }, { 227,1290 }, { 228,1290 }, { 229,1290 },
 { 230,1290 }, { 231,1290 }, { 232,1290 }, { 233,1290 }, { 234,1290 },
 { 235,1290 }, { 236,1290 }, { 237,1290 }, { 238,1290 }, { 239,1290 },
 { 240,1290 }, { 241,1290 }, { 242,1290 }, { 243,1290 }, { 244,1290 },
 { 245,1290 }, { 246,1290 }, { 247,1290 }, { 248,1290 }, { 249,1290 },
 { 250,1290 }, { 251,1290 }, { 252,1290 }, { 253,1290 }, { 254,1290 },

 { 255,1290 }, { 256,1290 }, {   0,   9 }, {   0,4768 }, {   1,1032 },
 {   2,1032 }, {   3,1032 }, {   4,1032 }, {   5,1032 }, {   6,1032 },
 {   7,1032 }, {   8,1032 }, {   0,   0 }, {   0,   0 }, {  11,1032 },
 {  12,1032 }, {  13,1032 }, {  14,1032 }, {  15,1032 }, {  16,1032 },
 {  17,1032 }, {  18,1032 }, {  19,1032 }, {  20,1032 }, {  21,1032 },
 {  22,1032 }, {  23,1032 }, {  24,1032 }, {  25,1032 }, {  26,1032 },
 {  27,1032 }, {  28,1032 }, {  29,1032 }, {  30,1032 }, {  31,1032 },
 {   0,   0 }, {  33,1032 }, {  34,1032 }, {  35,1032 }, {  36,1930 },
 {  37,1032 }, {  38,1032 }, {  39,1032 }, {   0,   0 }, {   0,   0 },
 {  42,1930 }, {  43,1032 }, {  44,1032 }, {  45,1032 }, {  46,2188 },

 {  47,1032 }, {  48,1930 }, {  49,1930 }, {  50,1930 }, {  51,1930 },
 {  52,1930 }, {  53,1930 }, {  54,1930 }, {  55,1930 }, {  56,1930 },
 {  57,1930 }, {  58,1032 }, {  59,1032 }, {  60,1032 }, {  61,1032 },
 {  62,1032 }, {  63,1930 }, {  64,1032 }, {  65,1930 }, {  66,1930 },
 {  67,1930 }, {  68,1930 }, {  69,1930 }, {  70,1930 }, {  71,1930 },
 {  72,1930 }, {  73,1930 }, {  74,1930 }, {  75,1930 }, {  76,1930 },
 {  77,1930 }, {  78,1930 }, {  79,1930 }, {  80,1930 }, {  81,1930 },
 {  82,1930 }, {  83,1930 }, {  84,1930 }, {  85,1930 }, {  86,1930 },
 {  87,1930 }, {  88,1930 }, {  89,1930 }, {  90,1930 }, {  91,1032 },
 {  92,1032 }, {  93,1032 }, {  94,1032 }, {  95,1032 }, {  96,1032 },

 {  97,1930 }, {  98,1930 }, {  99,1930 }, { 100,1930 }, { 101,1930 },
 { 102,1930 }, { 103,1930 }, { 104,1930 }, { 105,1930 }, { 106,1930 },
 { 107,1930 }, { 108,1930 }, { 109,1930 }, { 110,1930 }, { 111,1930 },
 { 112,1930 }, { 113,1930 }, { 114,1930 }, { 115,1930 }, { 116,1930 },
 { 117,1930 }, { 118,1930 }, { 119,1930 }, { 120,1930 }, { 121,1930 },
 { 122,1930 }, { 123,1032 }, { 124,1032 }, { 125,1032 }, { 126,1032 },
 { 127,1032 }, { 128,1032 }, { 129,1032 }, { 130,1032 }, { 131,1032 },
 { 132,1032 }, { 133,1032 }, { 134,1032 }, { 135,1032 }, { 136,1032 },
 { 137,1032 }, { 138,1032 }, { 139,1032 }, { 140,1032 }, { 141,1032 },
 { 142,1032 }, { 143,1032 }, { 144,1032 }, { 145,1032 }, { 146,1032 },

 { 147,1032 }, { 148,1032 }, { 149,1032 }, { 150,1032 }, { 151,1032 },
 { 152,1032 }, { 153,1032 }, { 154,1032 }, { 155,1032 }, { 156,1032 },
 { 157,1032 }, { 158,1032 }, { 159,1032 }, { 160,1032 }, { 161,1032 },
 { 162,1032 }, { 163,1032 }, { 164,1032 }, { 165,1032 }, { 166,1032 },
 { 167,1032 }, { 168,1032 }, { 169,1032 }, { 170,1032 }, { 171,1032 },
 { 172,1032 }, { 173,1032 }, { 174,1032 }, { 175,1032 }, { 176,1032 },
 { 177,1032 }, { 178,1032 }, { 179,1032 }, { 180,1032 }, { 181,1032 },
 { 182,1032 }, { 183,1032 }, { 184,1032 }, { 185,1032 }, { 186,1032 },
 { 187,1032 }, { 188,1032 }, { 189,1032 }, { 190,1032 }, { 191,1032 },
 { 192,1032 }, { 193,1032 }, { 194,1032 }, { 195,1032 }, { 196,1032 },

 { 197,1032 }, { 198,1032 }, { 199,1032 }, { 200,1032 }, { 201,1032 },
 { 202,1032 }, { 203,1032 }, { 204,1032 }, { 205,1032 }, { 206,1032 },
 { 207,1032 }, { 208,1032 }, { 209,1032 }, { 210,1032 }, { 211,1032 },
 { 212,1032 }, { 213,1032 }, { 214,1032 }, { 215,1032 }, { 216,1032 },
 { 217,1032 }, { 218,1032 }, { 219,1032 }, { 220,1032 }, { 221,1032 },
 { 222,1032 }, { 223,1032 }, { 224,1032 }, { 225,1032 }, { 226,1032 },
 { 227,1032 }, { 228,1032 }, { 229,1032 }, { 230,1032 }, { 231,1032 },
 { 232,1032 }, { 233,1032 }, { 234,1032 }, { 235,1032 }, { 236,1032 },
 { 237,1032 }, { 238,1032 }, { 239,1032 }, { 240,1032 }, { 241,1032 },
 { 242,1032 }, { 243,1032 }, { 244,1032 }, { 245,1032 }, { 246,1032 },

 { 247,1032 }, { 248,1032 }, { 249,1032 }, { 250,1032 }, { 251,1032 },
 { 252,1032 }, { 253,1032 }, { 254,1032 }, { 255,1032 }, { 256,1032 },
 {   0,  14 }, {   0,4510 }, {   1,2188 }, {   2,2188 }, {   3,2188 },
 {   4,2188 }, {   5,2188 }, {   6,2188 }, {   7,2188 }, {   8,2188 },
 {   0,   0 }, {   0,   0 }, {  11,2188 }, {  12,2188 }, {  13,2188 },
 {  14,2188 }, {  15,2188 }, {  16,2188 }, {  17,2188 }, {  18,2188 },
 {  19,2188 }, {  20,2188 }, {  21,2188 }, {  22,2188 }, {  23,2188 },
 {  24,2188 }, {  25,2188 }, {  26,2188 }, {  27,2188 }, {  28,2188 },
 {  29,2188 }, {  30,2188 }, {  31,2188 }, {   0,   0 }, {  33,2188 },
 {  34,2188 }, {  35,2188 }, {  36,2188 }, {  37,2188 }, {  38,2188 },

 {  39,2188 }, {   0,   0 }, {   0,   0 }, {  42,2188 }, {  43,2188 },
 {  44,2188 }, {   0,   0 }, {  46,2188 }, {  47,2188 }, {  48,2188 },
 {  49,2188 }, {  50,2188 }, {  51,2188 }, {  52,2188 }, {  53,2188 },
 {  54,2188 }, {  55,2188 }, {  56,2188 }, {  57,2188 }, {  58,2188 },
 {  59,2188 }, {  60,2188 }, {  61,2188 }, {  62,2188 }, {  63,2188 },
 {  64,2188 }, {  65,2188 }, {  66,2188 }, {  67,2188 }, {  68,2188 },
 {  69,2188 }, {  70,2188 }, {  71,2188 }, {  72,2188 }, {  73,2188 },
 {  74,2188 }, {  75,2188 }, {  76,2188 }, {  77,2188 }, {  78,2188 },
 {  79,2188 }, {  80,2188 }, {  81,2188 }, {  82,2188 }, {  83,2188 },
 {  84,2188 }, {  85,2188 }, {  86,2188 }, {  87,2188 }, {  88,2188 },

 {  89,2188 }, {  90,2188 }, {  91,2188 }, {  92,2188 }, {  93,2188 },
 {  94,2188 }, {  95,2188 }, {  96,2188 }, {  97,2188 }, {  98,2188 },
 {  99,2188 }, { 100,2188 }, { 101,2188 }, { 102,2188 }, { 103,2188 },
 { 104,2188 }, { 105,2188 }, { 106,2188 }, { 107,2188 }, { 108,2188 },
 { 109,2188 }, { 110,2188 }, { 111,2188 }, { 112,2188 }, { 113,2188 },
 { 114,2188 }, { 115,2188 }, { 116,2188 }, { 117,2188 }, { 118,2188 },
 { 119,2188 }, { 120,2188 }, { 121,2188 }, { 122,2188 }, { 123,2188 },
 { 124,2188 }, { 125,2188 }, { 126,2188 }, { 127,2188 }, { 128,2188 },
 { 129,2188 }, { 130,2188 }, { 131,2188 }, { 132,2188 }, { 133,2188 },
 { 134,2188 }, { 135,2188 }, { 136,2188 }, { 137,2188 }, { 138,2188 },

 { 139,2188 }, { 140,2188 }, { 141,2188 }, { 142,2188 }, { 143,2188 },
 { 144,2188 }, { 145,2188 }, { 146,2188 }, { 147,2188 }, { 148,2188 },
 { 149,2188 }, { 150,2188 }, { 151,2188 }, { 152,2188 }, { 153,2188 },
 { 154,2188 }, { 155,2188 }, { 156,2188 }, { 157,2188 }, { 158,2188 },
 { 159,2188 }, { 160,2188 }, { 161,2188 }, { 162,2188 }, { 163,2188 },
 { 164,2188 }, { 165,2188 }, { 166,2188 }, { 167,2188 }, { 168,2188 },
 { 169,2188 }, { 170,2188 }, { 171,2188 }, { 172,2188 }, { 173,2188 },
 { 174,2188 }, { 175,2188 }, { 176,2188 }, { 177,2188 }, { 178,2188 },
 { 179,2188 }, { 180,2188 }, { 181,2188 }, { 182,2188 }, { 183,2188 },
 { 184,2188 }, { 185,2188 }, { 186,2188 }, { 187,2188 }, { 188,2188 },

 { 189,2188 }, { 190,2188 }, { 191,2188 }, { 192,2188 }, { 193,2188 },
 { 194,2188 }, { 195,2188 }, { 196,2188 }, { 197,2188 }, { 198,2188 },
 { 199,2188 }, { 200,2188 }, { 201,2188 }, { 202,2188 }, { 203,2188 },
 { 204,2188 }, { 205,2188 }, { 206,2188 }, { 207,2188 }, { 208,2188 },
 { 209,2188 }, { 210,2188 }, { 211,2188 }, { 212,2188 }, { 213,2188 },
 { 214,2188 }, { 215,2188 }, { 216,2188 }, { 217,2188 }, { 218,2188 },
 { 219,2188 }, { 220,2188 }, { 221,2188 }, { 222,2188 }, { 223,2188 },
 { 224,2188 }, { 225,2188 }, { 226,2188 }, { 227,2188 }, { 228,2188 },
 { 229,2188 }, { 230,2188 }, { 231,2188 }, { 232,2188 }, { 233,2188 },
 { 234,2188 }, { 235,2188 }, { 236,2188 }, { 237,2188 }, { 238,2188 },

 { 239,2188 }, { 240,2188 }, { 241,2188 }, { 242,2188 }, { 243,2188 },
 { 244,2188 }, { 245,2188 }, { 246,2188 }, { 247,2188 }, { 248,2188 },
 { 249,2188 }, { 250,2188 }, { 251,2188 }, { 252,2188 }, { 253,2188 },
 { 254,2188 }, { 255,2188 }, { 256,2188 }, {   0,  14 }, {   0,4252 },
 {   1,1930 }, {   2,1930 }, {   3,1930 }, {   4,1930 }, {   5,1930 },
 {   6,1930 }, {   7,1930 }, {   8,1930 }, {   0,   0 }, {   0,   0 },
 {  11,1930 }, {  12,1930 }, {  13,1930 }, {  14,1930 }, {  15,1930 },
 {  16,1930 }, {  17,1930 }, {  18,1930 }, {  19,1930 }, {  20,1930 },
 {  21,1930 }, {  22,1930 }, {  23,1930 }, {  24,1930 }, {  25,1930 },
 {  26,1930 }, {  27,1930 }, {  28,1930 }, {  29,1930 }, {  30,1930 },

 {  31,1930 }, {   0,   0 }, {  33,1930 }, {  34,1930 }, {  35,1930 },
 {  36,1930 }, {  37,1930 }, {  38,1930 }, {  39,1930 }, {   0,   0 },
 {   0,   0 }, {  42,1930 }, {  43,1930 }, {  44,1930 }, {   0,   0 },
 {  46,1930 }, {  47,1930 }, {  48,2188 }, {  49,2188 }, {  50,2188 },
 {  51,2188 }, {  52,2188 }, {  53,2188 }, {  54,2188 }, {  55,2188 },
 {  56,2188 }, {  57,2188 }, {  58,1930 }, {  59,1930 }, {  60,1930 },
 {  61,1930 }, {  62,1930 }, {  63,1930 }, {  64,1930 }, {  65,2446 },
 {  66,2446 }, {  67,2446 }, {  68,2446 }, {  69,2446 }, {  70,2446 },
 {  71,2446 }, {  72,2446 }, {  73,2446 }, {  74,2446 }, {  75,2446 },
 {  76,2446 }, {  77,2446 }, {  78,2446 }, {  79,2446 }, {  80,2446 },

 {  81,2446 }, {  82,2446 }, {  83,2446 }, {  84,2446 }, {  85,2446 },
 {  86,2446 }, {  87,2446 }, {  88,2446 }, {  89,2446 }, {  90,2446 },
 {  91,1930 }, {  92,1930 }, {  93,1930 }, {  94,1930 }, {  95,1930 },
 {  96,1930 }, {  97,1930 }, {  98,1930 }, {  99,1930 }, { 100,1930 },
 { 101,1930 }, { 102,1930 }, { 103,1930 }, { 104,1930 }, { 105,1930 },
 { 106,1930 }, { 107,1930 }, { 108,1930 }, { 109,1930 }, { 110,1930 },
 { 111,1930 }, { 112,1930 }, { 113,1930 }, { 114,1930 }, { 115,1930 },
 { 116,1930 }, { 117,1930 }, { 118,1930 }, { 119,1930 }, { 120,1930 },
 { 121,1930 }, { 122,1930 }, { 123,1930 }, { 124,1930 }, { 125,1930 },
 { 126,1930 }, { 127,1930 }, { 128,1930 }, { 129,1930 }, { 130,1930 },

 { 131,1930 }, { 132,1930 }, { 133,1930 }, { 134,1930 }, { 135,1930 },
 { 136,1930 }, { 137,1930 }, { 138,1930 }, { 139,1930 }, { 140,1930 },
 { 141,1930 }, { 142,1930 }, { 143,1930 }, { 144,1930 }, { 145,1930 },
 { 146,1930 }, { 147,1930 }, { 148,1930 }, { 149,1930 }, { 150,1930 },
 { 151,1930 }, { 152,1930 }, { 153,1930 }, { 154,1930 }, { 155,1930 },
 { 156,1930 }, { 157,1930 }, { 158,1930 }, { 159,1930 }, { 160,1930 },
 { 161,1930 }, { 162,1930 }, { 163,1930 }, { 164,1930 }, { 165,1930 },
 { 166,1930 }, { 167,1930 }, { 168,1930 }, { 169,1930 }, { 170,1930 },
 { 171,1930 }, { 172,1930 }, { 173,1930 }, { 174,1930 }, { 175,1930 },
 { 176,1930 }, { 177,1930 }, { 178,1930 }, { 179,1930 }, { 180,1930 },

 { 181,1930 }, { 182,1930 }, { 183,1930 }, { 184,1930 }, { 185,1930 },
 { 186,1930 }, { 187,1930 }, { 188,1930 }, { 189,1930 }, { 190,1930 },
 { 191,1930 }, { 192,1930 }, { 193,1930 }, { 194,1930 }, { 195,1930 },
 { 196,1930 }, { 197,1930 }, { 198,1930 }, { 199,1930 }, { 200,1930 },
 { 201,1930 }, { 202,1930 }, { 203,1930 }, { 204,1930 }, { 205,1930 },
 { 206,1930 }, { 207,1930 }, { 208,1930 }, { 209,1930 }, { 210,1930 },
 { 211,1930 }, { 212,1930 }, { 213,1930 }, { 214,1930 }, { 215,1930 },
 { 216,1930 }, { 217,1930 }, { 218,1930 }, { 219,1930 }, { 220,1930 },
 { 221,1930 }, { 222,1930 }, { 223,1930 }, { 224,1930 }, { 225,1930 },
 { 226,1930 }, { 227,1930 }, { 228,1930 }, { 229,1930 }, { 230,1930 },

 { 231,1930 }, { 232,1930 }, { 233,1930 }, { 234,1930 }, { 235,1930 },
 { 236,1930 }, { 237,1930 }, { 238,1930 }, { 239,1930 }, { 240,1930 },
 { 241,1930 }, { 242,1930 }, { 243,1930 }, { 244,1930 }, { 245,1930 },
 { 246,1930 }, { 247,1930 }, { 248,1930 }, { 249,1930 }, { 250,1930 },
 { 251,1930 }, { 252,1930 }, { 253,1930 }, { 254,1930 }, { 255,1930 },
 { 256,1930 }, {   0,   4 }, {   0,3994 }, {   1,   0 }, {   2,   0 },
 {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,   0 }, {   0,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 },
 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },

 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {   0,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {   0,   0 }, {   0,   0 }, {  42,   0 },
 {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 },
 {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },
 {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 },

 {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 },
 {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 },
 {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 },
 {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 },
 {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },
 { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 },
 { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 },
 { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 },
 { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 },

 { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 },
 { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 }, { 132,   0 },
 { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 }, { 137,   0 },
 { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 }, { 142,   0 },
 { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 }, { 147,   0 },
 { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 }, { 152,   0 },
 { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 }, { 157,   0 },
 { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 }, { 162,   0 },
 { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 }, { 167,   0 },
 { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 }, { 172,   0 },

 { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 }, { 177,   0 },
 { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 }, { 182,   0 },
 { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 }, { 187,   0 },
 { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 }, { 192,   0 },
 { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 }, { 197,   0 },
 { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 }, { 202,   0 },
 { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 }, { 207,   0 },
 { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 }, { 212,   0 },
 { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 }, { 217,   0 },
 { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 }, { 222,   0 },

 { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 }, { 227,   0 },
 { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 }, { 232,   0 },
 { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 }, { 237,   0 },
 { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 }, { 242,   0 },
 { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 }, { 247,   0 },
 { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 }, { 252,   0 },
 { 253,   0 }, { 254,   0 }, { 255,   0 }, { 256,   0 }, {   0,  10 },
 {   0,3736 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 }, {   0,   0 },
 {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 },

 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {   0,   0 }, {  33,   0 }, {  34,   0 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {   0,   0 }, {   0,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 },
 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 },
 {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 },

 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 },
 {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },

 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 },
 { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 },
 { 130,   0 }, { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 },
 { 135,   0 }, { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 },
 { 140,   0 }, { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 },
 { 145,   0 }, { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 },
 { 150,   0 }, { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 },
 { 155,   0 }, { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 },
 { 160,   0 }, { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 },

 { 165,   0 }, { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 },
 { 170,   0 }, { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 },
 { 175,   0 }, { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 },
 { 180,   0 }, { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 },
 { 185,   0 }, { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 },
 { 190,   0 }, { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 },
 { 195,   0 }, { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 },
 { 200,   0 }, { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 },
 { 205,   0 }, { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 },
 { 210,   0 }, { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 },

 { 215,   0 }, { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 },
 { 220,   0 }, { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 },
 { 225,   0 }, { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 },
 { 230,   0 }, { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 },
 { 235,   0 }, { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 },
 { 240,   0 }, { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 },
 { 245,   0 }, { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 },
 { 250,   0 }, { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 },
 { 255,   0 }, { 256,   0 }, {   0,   9 }, {   0,3478 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  42,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46, 124 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },

 {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  63,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },

 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, {   0,   0 }, {   0,3354 }, {   1,1806 }, {   2,1806 },
 {   3,1806 }, {   4,1806 }, {   5,1806 }, {   6,1806 }, {   7,1806 },
 {   8,1806 }, {   0,   0 }, {   0,   0 }, {  11,1806 }, {  12,1806 },
 {  13,1806 }, {  14,1806 }, {  15,1806 }, {  16,1806 }, {  17,1806 },
 {  18,1806 }, {  19,1806 }, {  20,1806 }, {  21,1806 }, {  22,1806 },
 {  23,1806 }, {  24,1806 }, {  25,1806 }, {  26,1806 }, {  27,1806 },
 {  28,1806 }, {  29,1806 }, {  30,1806 }, {  31,1806 }, {   0,   0 },

 {  33,1806 }, {  34,1806 }, {  35,1806 }, {  36,1806 }, {  37,1806 },
 {  38,1806 }, {  39,1806 }, {   0,   0 }, {   0,   0 }, {  42,1806 },
 {  43,1806 }, {  44,1806 }, {  45,1806 }, {  46,1806 }, {  47,1806 },
 {  48,1806 }, {  49,1806 }, {  50,1806 }, {  51,1806 }, {  52,1806 },
 {  53,1806 }, {  54,1806 }, {  55,1806 }, {  56,1806 }, {  57,1806 },
 {  58,1806 }, {  59,1806 }, {  60,1806 }, {  61,1806 }, {  62,1806 },
 {  63,1806 }, {  64,1806 }, {  65,1806 }, {  66,1806 }, {  67,1806 },
 {  68,1806 }, {  69,1806 }, {  70,1806 }, {  71,1806 }, {  72,1806 },
 {  73,1806 }, {  74,1806 }, {  75,1806 }, {  76,1806 }, {  77,1806 },
 {  78,1806 }, {  79,1806 }, {  80,1806 }, {  81,1806 }, {  82,1806 },

 {  83,1806 }, {  84,1806 }, {  85,1806 }, {  86,1806 }, {  87,1806 },
 {  88,1806 }, {  89,1806 }, {  90,1806 }, {  91,1806 }, {  92,1806 },
 {  93,1806 }, {  94,1806 }, {  95,1806 }, {  96,1806 }, {  97,1806 },
 {  98,1806 }, {  99,1806 }, { 100,1806 }, { 101,1806 }, { 102,1806 },
 { 103,1806 }, { 104,1806 }, { 105,1806 }, { 106,1806 }, { 107,1806 },
 { 108,1806 }, { 109,1806 }, { 110,1806 }, { 111,1806 }, { 112,1806 },
 { 113,1806 }, { 114,1806 }, { 115,1806 }, { 116,1806 }, { 117,1806 },
 { 118,1806 }, { 119,1806 }, { 120,1806 }, { 121,1806 }, { 122,1806 },
 { 123,1806 }, { 124,1806 }, { 125,1806 }, { 126,1806 }, { 127,1806 },
 { 128,1806 }, { 129,1806 }, { 130,1806 }, { 131,1806 }, { 132,1806 },

 { 133,1806 }, { 134,1806 }, { 135,1806 }, { 136,1806 }, { 137,1806 },
 { 138,1806 }, { 139,1806 }, { 140,1806 }, { 141,1806 }, { 142,1806 },
 { 143,1806 }, { 144,1806 }, { 145,1806 }, { 146,1806 }, { 147,1806 },
 { 148,1806 }, { 149,1806 }, { 150,1806 }, { 151,1806 }, { 152,1806 },
 { 153,1806 }, { 154,1806 }, { 155,1806 }, { 156,1806 }, { 157,1806 },
 { 158,1806 }, { 159,1806 }, { 160,1806 }, { 161,1806 }, { 162,1806 },
 { 163,1806 }, { 164,1806 }, { 165,1806 }, { 166,1806 }, { 167,1806 },
 { 168,1806 }, { 169,1806 }, { 170,1806 }, { 171,1806 }, { 172,1806 },
 { 173,1806 }, { 174,1806 }, { 175,1806 }, { 176,1806 }, { 177,1806 },
 { 178,1806 }, { 179,1806 }, { 180,1806 }, { 181,1806 }, { 182,1806 },

 { 183,1806 }, { 184,1806 }, { 185,1806 }, { 186,1806 }, { 187,1806 },
 { 188,1806 }, { 189,1806 }, { 190,1806 }, { 191,1806 }, { 192,1806 },
 { 193,1806 }, { 194,1806 }, { 195,1806 }, { 196,1806 }, { 197,1806 },
 { 198,1806 }, { 199,1806 }, { 200,1806 }, { 201,1806 }, { 202,1806 },
 { 203,1806 }, { 204,1806 }, { 205,1806 }, { 206,1806 }, { 207,1806 },
 { 208,1806 }, { 209,1806 }, { 210,1806 }, { 211,1806 }, { 212,1806 },
 { 213,1806 }, { 214,1806 }, { 215,1806 }, { 216,1806 }, { 217,1806 },
 { 218,1806 }, { 219,1806 }, { 220,1806 }, { 221,1806 }, { 222,1806 },
 { 223,1806 }, { 224,1806 }, { 225,1806 }, { 226,1806 }, { 227,1806 },
 { 228,1806 }, { 229,1806 }, { 230,1806 }, { 231,1806 }, { 232,1806 },

 { 233,1806 }, { 234,1806 }, { 235,1806 }, { 236,1806 }, { 237,1806 },
 { 238,1806 }, { 239,1806 }, { 240,1806 }, { 241,1806 }, { 242,1806 },
 { 243,1806 }, { 244,1806 }, { 245,1806 }, { 246,1806 }, { 247,1806 },
 { 248,1806 }, { 249,1806 }, { 250,1806 }, { 251,1806 }, { 252,1806 },
 { 253,1806 }, { 254,1806 }, { 255,1806 }, { 256,1806 }, {   0,  10 },
 {   0,3096 }, {   1,-640 }, {   2,-640 }, {   3,-640 }, {   4,-640 },
 {   5,-640 }, {   6,-640 }, {   7,-640 }, {   8,-640 }, {   0,   0 },
 {   0,   0 }, {  11,-640 }, {  12,-640 }, {  13,-640 }, {  14,-640 },
 {  15,-640 }, {  16,-640 }, {  17,-640 }, {  18,-640 }, {  19,-640 },
 {  20,-640 }, {  21,-640 }, {  22,-640 }, {  23,-640 }, {  24,-640 },

 {  25,-640 }, {  26,-640 }, {  27,-640 }, {  28,-640 }, {  29,-640 },
 {  30,-640 }, {  31,-640 }, {   0,   0 }, {  33,-640 }, {  34,-640 },
 {  35,-640 }, {  36,-640 }, {  37,-640 }, {  38,-640 }, {  39,-640 },
 {   0,   0 }, {   0,   0 }, {  42,-640 }, {  43,-640 }, {  44,-640 },
 {  45,-640 }, {  46,-640 }, {  47,-640 }, {  48,-640 }, {  49,-640 },
 {  50,-640 }, {  51,-640 }, {  52,-640 }, {  53,-640 }, {  54,-640 },
 {  55,-640 }, {  56,-640 }, {  57,-640 }, {  58,-640 }, {  59,-640 },
 {  60,-640 }, {  61,-640 }, {  62,-640 }, {  63,-640 }, {  64,-640 },
 {  65,-640 }, {  66,-640 }, {  67,-640 }, {  68,-640 }, {  69,-640 },
 {  70,-640 }, {  71,-640 }, {  72,-640 }, {  73,-640 }, {  74,-640 },

 {  75,-640 }, {  76,-640 }, {  77,-640 }, {  78,-640 }, {  79,1806 },
 {  80,-640 }, {  81,-640 }, {  82,-640 }, {  83,-640 }, {  84,-640 },
 {  85,-640 }, {  86,-640 }, {  87,-640 }, {  88,-640 }, {  89,-640 },
 {  90,-640 }, {  91,-640 }, {  92,-640 }, {  93,-640 }, {  94,-640 },
 {  95,-640 }, {  96,-640 }, {  97,-640 }, {  98,-640 }, {  99,-640 },
 { 100,-640 }, { 101,-640 }, { 102,-640 }, { 103,-640 }, { 104,-640 },
 { 105,-640 }, { 106,-640 }, { 107,-640 }, { 108,-640 }, { 109,-640 },
 { 110,-640 }, { 111,-640 }, { 112,-640 }, { 113,-640 }, { 114,-640 },
 { 115,-640 }, { 116,-640 }, { 117,-640 }, { 118,-640 }, { 119,-640 },
 { 120,-640 }, { 121,-640 }, { 122,-640 }, { 123,-640 }, { 124,-640 },

 { 125,-640 }, { 126,-640 }, { 127,-640 }, { 128,-640 }, { 129,-640 },
 { 130,-640 }, { 131,-640 }, { 132,-640 }, { 133,-640 }, { 134,-640 },
 { 135,-640 }, { 136,-640 }, { 137,-640 }, { 138,-640 }, { 139,-640 },
 { 140,-640 }, { 141,-640 }, { 142,-640 }, { 143,-640 }, { 144,-640 },
 { 145,-640 }, { 146,-640 }, { 147,-640 }, { 148,-640 }, { 149,-640 },
 { 150,-640 }, { 151,-640 }, { 152,-640 }, { 153,-640 }, { 154,-640 },
 { 155,-640 }, { 156,-640 }, { 157,-640 }, { 158,-640 }, { 159,-640 },
 { 160,-640 }, { 161,-640 }, { 162,-640 }, { 163,-640 }, { 164,-640 },
 { 165,-640 }, { 166,-640 }, { 167,-640 }, { 168,-640 }, { 169,-640 },
 { 170,-640 }, { 171,-640 }, { 172,-640 }, { 173,-640 }, { 174,-640 },

 { 175,-640 }, { 176,-640 }, { 177,-640 }, { 178,-640 }, { 179,-640 },
 { 180,-640 }, { 181,-640 }, { 182,-640 }, { 183,-640 }, { 184,-640 },
 { 185,-640 }, { 186,-640 }, { 187,-640 }, { 188,-640 }, { 189,-640 },
 { 190,-640 }, { 191,-640 }, { 192,-640 }, { 193,-640 }, { 194,-640 },
 { 195,-640 }, { 196,-640 }, { 197,-640 }, { 198,-640 }, { 199,-640 },
 { 200,-640 }, { 201,-640 }, { 202,-640 }, { 203,-640 }, { 204,-640 },
 { 205,-640 }, { 206,-640 }, { 207,-640 }, { 208,-640 }, { 209,-640 },
 { 210,-640 }, { 211,-640 }, { 212,-640 }, { 213,-640 }, { 214,-640 },
 { 215,-640 }, { 216,-640 }, { 217,-640 }, { 218,-640 }, { 219,-640 },
 { 220,-640 }, { 221,-640 }, { 222,-640 }, { 223,-640 }, { 224,-640 },

 { 225,-640 }, { 226,-640 }, { 227,-640 }, { 228,-640 }, { 229,-640 },
 { 230,-640 }, { 231,-640 }, { 232,-640 }, { 233,-640 }, { 234,-640 },
 { 235,-640 }, { 236,-640 }, { 237,-640 }, { 238,-640 }, { 239,-640 },
 { 240,-640 }, { 241,-640 }, { 242,-640 }, { 243,-640 }, { 244,-640 },
 { 245,-640 }, { 246,-640 }, { 247,-640 }, { 248,-640 }, { 249,-640 },
 { 250,-640 }, { 251,-640 }, { 252,-640 }, { 253,-640 }, { 254,-640 },
 { 255,-640 }, { 256,-640 }, {   0,   9 }, {   0,2838 }, {   1,-898 },
 {   2,-898 }, {   3,-898 }, {   4,-898 }, {   5,-898 }, {   6,-898 },
 {   7,-898 }, {   8,-898 }, {   0,   0 }, {   0,   0 }, {  11,-898 },
 {  12,-898 }, {  13,-898 }, {  14,-898 }, {  15,-898 }, {  16,-898 },

 {  17,-898 }, {  18,-898 }, {  19,-898 }, {  20,-898 }, {  21,-898 },
 {  22,-898 }, {  23,-898 }, {  24,-898 }, {  25,-898 }, {  26,-898 },
 {  27,-898 }, {  28,-898 }, {  29,-898 }, {  30,-898 }, {  31,-898 },
 {   0,   0 }, {  33,-898 }, {  34,-898 }, {  35,-898 }, {  36,   0 },
 {  37,-898 }, {  38,-898 }, {  39,-898 }, {   0,   0 }, {   0,   0 },
 {  42,   0 }, {  43,-898 }, {  44,-898 }, {  45,-898 }, {  46, 258 },
 {  47,-898 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,-898 }, {  59,-898 }, {  60,-898 }, {  61,-898 },
 {  62,-898 }, {  63,   0 }, {  64,-898 }, {  65,   0 }, {  66,   0 },

 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,-898 },
 {  92,-898 }, {  93,-898 }, {  94,-898 }, {  95,-898 }, {  96,-898 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },

 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, { 123,-898 }, { 124,-898 }, { 125,-898 }, { 126,-898 },
 { 127,-898 }, { 128,-898 }, { 129,-898 }, { 130,-898 }, { 131,-898 },
 { 132,-898 }, { 133,-898 }, { 134,-898 }, { 135,-898 }, { 136,-898 },
 { 137,-898 }, { 138,-898 }, { 139,-898 }, { 140,-898 }, { 141,-898 },
 { 142,-898 }, { 143,-898 }, { 144,-898 }, { 145,-898 }, { 146,-898 },
 { 147,-898 }, { 148,-898 }, { 149,-898 }, { 150,-898 }, { 151,-898 },
 { 152,-898 }, { 153,-898 }, { 154,-898 }, { 155,-898 }, { 156,-898 },
 { 157,-898 }, { 158,-898 }, { 159,-898 }, { 160,-898 }, { 161,-898 },
 { 162,-898 }, { 163,-898 }, { 164,-898 }, { 165,-898 }, { 166,-898 },

 { 167,-898 }, { 168,-898 }, { 169,-898 }, { 170,-898 }, { 171,-898 },
 { 172,-898 }, { 173,-898 }, { 174,-898 }, { 175,-898 }, { 176,-898 },
 { 177,-898 }, { 178,-898 }, { 179,-898 }, { 180,-898 }, { 181,-898 },
 { 182,-898 }, { 183,-898 }, { 184,-898 }, { 185,-898 }, { 186,-898 },
 { 187,-898 }, { 188,-898 }, { 189,-898 }, { 190,-898 }, { 191,-898 },
 { 192,-898 }, { 193,-898 }, { 194,-898 }, { 195,-898 }, { 196,-898 },
 { 197,-898 }, { 198,-898 }, { 199,-898 }, { 200,-898 }, { 201,-898 },
 { 202,-898 }, { 203,-898 }, { 204,-898 }, { 205,-898 }, { 206,-898 },
 { 207,-898 }, { 208,-898 }, { 209,-898 }, { 210,-898 }, { 211,-898 },
 { 212,-898 }, { 213,-898 }, { 214,-898 }, { 215,-898 }, { 216,-898 },

 { 217,-898 }, { 218,-898 }, { 219,-898 }, { 220,-898 }, { 221,-898 },
 { 222,-898 }, { 223,-898 }, { 224,-898 }, { 225,-898 }, { 226,-898 },
 { 227,-898 }, { 228,-898 }, { 229,-898 }, { 230,-898 }, { 231,-898 },
 { 232,-898 }, { 233,-898 }, { 234,-898 }, { 235,-898 }, { 236,-898 },
 { 237,-898 }, { 238,-898 }, { 239,-898 }, { 240,-898 }, { 241,-898 },
 { 242,-898 }, { 243,-898 }, { 244,-898 }, { 245,-898 }, { 246,-898 },
 { 247,-898 }, { 248,-898 }, { 249,-898 }, { 250,-898 }, { 251,-898 },
 { 252,-898 }, { 253,-898 }, { 254,-898 }, { 255,-898 }, { 256,-898 },
 {   0,  10 }, {   0,2580 }, {   1,1548 }, {   2,1548 }, {   3,1548 },
 {   4,1548 }, {   5,1548 }, {   6,1548 }, {   7,1548 }, {   8,1548 },

 {   0,   0 }, {   0,   0 }, {  11,1548 }, {  12,1548 }, {  13,1548 },
 {  14,1548 }, {  15,1548 }, {  16,1548 }, {  17,1548 }, {  18,1548 },
 {  19,1548 }, {  20,1548 }, {  21,1548 }, {  22,1548 }, {  23,1548 },
 {  24,1548 }, {  25,1548 }, {  26,1548 }, {  27,1548 }, {  28,1548 },
 {  29,1548 }, {  30,1548 }, {  31,1548 }, {   0,   0 }, {  33,1548 },
 {  34,1548 }, {  35,1548 }, {  36,1548 }, {  37,1548 }, {  38,1548 },
 {  39,1548 }, {   0,   0 }, {   0,   0 }, {  42,1548 }, {  43,1548 },
 {  44,1548 }, {  45,1548 }, {  46,1548 }, {  47,1548 }, {  48,1548 },
 {  49,1548 }, {  50,1548 }, {  51,1548 }, {  52,1548 }, {  53,1548 },
 {  54,1548 }, {  55,1548 }, {  56,1548 }, {  57,1548 }, {  58,1548 },

 {  59,1548 }, {  60,1548 }, {  61,1548 }, {  62,1548 }, {  63,1548 },
 {  64,1548 }, {  65,1548 }, {  66,1548 }, {  67,1548 }, {  68,1548 },
 {  69,1548 }, {  70,1548 }, {  71,1548 }, {  72,1548 }, {  73,1548 },
 {  74,1548 }, {  75,1548 }, {  76,1548 }, {  77,1548 }, {  78,1548 },
 {  79,1548 }, {  80,1548 }, {  81,1548 }, {  82,1548 }, {  83,1548 },
 {  84,1548 }, {  85,1548 }, {  86,1548 }, {  87,1548 }, {  88,1548 },
 {  89,1548 }, {  90,1548 }, {  91,1548 }, {  92,1548 }, {  93,1548 },
 {  94,1548 }, {  95,1548 }, {  96,1548 }, {  97,1548 }, {  98,1548 },
 {  99,1548 }, { 100,1548 }, { 101,1548 }, { 102,1548 }, { 103,1548 },
 { 104,1548 }, { 105,1548 }, { 106,1548 }, { 107,1548 }, { 108,1548 },

 { 109,1548 }, { 110,1548 }, { 111,1548 }, { 112,1548 }, { 113,1548 },
 { 114,1548 }, { 115,1548 }, { 116,1548 }, { 117,1548 }, { 118,1548 },
 { 119,1548 }, { 120,1548 }, { 121,1548 }, { 122,1548 }, { 123,1548 },
 { 124,1548 }, { 125,1548 }, { 126,1548 }, { 127,1548 }, { 128,1548 },
 { 129,1548 }, { 130,1548 }, { 131,1548 }, { 132,1548 }, { 133,1548 },
 { 134,1548 }, { 135,1548 }, { 136,1548 }, { 137,1548 }, { 138,1548 },
 { 139,1548 }, { 140,1548 }, { 141,1548 }, { 142,1548 }, { 143,1548 },
 { 144,1548 }, { 145,1548 }, { 146,1548 }, { 147,1548 }, { 148,1548 },
 { 149,1548 }, { 150,1548 }, { 151,1548 }, { 152,1548 }, { 153,1548 },
 { 154,1548 }, { 155,1548 }, { 156,1548 }, { 157,1548 }, { 158,1548 },

 { 159,1548 }, { 160,1548 }, { 161,1548 }, { 162,1548 }, { 163,1548 },
 { 164,1548 }, { 165,1548 }, { 166,1548 }, { 167,1548 }, { 168,1548 },
 { 169,1548 }, { 170,1548 }, { 171,1548 }, { 172,1548 }, { 173,1548 },
 { 174,1548 }, { 175,1548 }, { 176,1548 }, { 177,1548 }, { 178,1548 },
 { 179,1548 }, { 180,1548 }, { 181,1548 }, { 182,1548 }, { 183,1548 },
 { 184,1548 }, { 185,1548 }, { 186,1548 }, { 187,1548 }, { 188,1548 },
 { 189,1548 }, { 190,1548 }, { 191,1548 }, { 192,1548 }, { 193,1548 },
 { 194,1548 }, { 195,1548 }, { 196,1548 }, { 197,1548 }, { 198,1548 },
 { 199,1548 }, { 200,1548 }, { 201,1548 }, { 202,1548 }, { 203,1548 },
 { 204,1548 }, { 205,1548 }, { 206,1548 }, { 207,1548 }, { 208,1548 },

 { 209,1548 }, { 210,1548 }, { 211,1548 }, { 212,1548 }, { 213,1548 },
 { 214,1548 }, { 215,1548 }, { 216,1548 }, { 217,1548 }, { 218,1548 },
 { 219,1548 }, { 220,1548 }, { 221,1548 }, { 222,1548 }, { 223,1548 },
 { 224,1548 }, { 225,1548 }, { 226,1548 }, { 227,1548 }, { 228,1548 },
 { 229,1548 }, { 230,1548 }, { 231,1548 }, { 232,1548 }, { 233,1548 },
 { 234,1548 }, { 235,1548 }, { 236,1548 }, { 237,1548 }, { 238,1548 },
 { 239,1548 }, { 240,1548 }, { 241,1548 }, { 242,1548 }, { 243,1548 },
 { 244,1548 }, { 245,1548 }, { 246,1548 }, { 247,1548 }, { 248,1548 },
 { 249,1548 }, { 250,1548 }, { 251,1548 }, { 252,1548 }, { 253,1548 },
 { 254,1548 }, { 255,1548 }, { 256,1548 }, {   0,  13 }, {   0,2322 },

 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   0,   0 }, {   0,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {   0,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {   0,   0 },
 {   0,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {   0,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },

 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },

 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 },
 { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 },
 { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 },
 { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 },
 { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 },

 { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 },
 { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 },
 { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 },
 { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 },
 { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 },
 { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 },
 { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 },
 { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 },
 { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 },
 { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 },

 { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 },
 { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 },
 { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 },
 { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 },
 { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 },
 { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 },
 { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 },
 { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 },
 { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 },
 { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 },

 { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 },
 { 256,   0 }, {   0,  11 }, {   0,2064 }, {   1,-258 }, {   2,-258 },
 {   3,-258 }, {   4,-258 }, {   5,-258 }, {   6,-258 }, {   7,-258 },
 {   8,-258 }, {   0,   0 }, {   0,   0 }, {  11,-258 }, {  12,-258 },
 {  13,-258 }, {  14,-258 }, {  15,-258 }, {  16,-258 }, {  17,-258 },
 {  18,-258 }, {  19,-258 }, {  20,-258 }, {  21,-258 }, {  22,-258 },
 {  23,-258 }, {  24,-258 }, {  25,-258 }, {  26,-258 }, {  27,-258 },
 {  28,-258 }, {  29,-258 }, {  30,-258 }, {  31,-258 }, {   0,   0 },
 {  33,-258 }, {  34,-258 }, {  35,-258 }, {  36,-258 }, {  37,-258 },
 {  38,-258 }, {  39,-258 }, {   0,   0 }, {   0,   0 }, {  42,-258 },

 {  43,-258 }, {  44,-258 }, {   0,   0 }, {  46,-258 }, {  47,-258 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  58,-258 }, {  59,-258 }, {  60,-258 }, {  61,-258 }, {  62,-258 },
 {  63,-258 }, {  64,-258 }, {  65,-258 }, {  66,-258 }, {  67,-258 },
 {  68,-258 }, {  69,-258 }, {  70,-258 }, {  71,-258 }, {  72,-258 },
 {  73,-258 }, {  74,-258 }, {  75,-258 }, {  76,-258 }, {  77,-258 },
 {  78,-258 }, {  79,-258 }, {  80,-258 }, {  81,-258 }, {  82,-258 },
 {  83,-258 }, {  84,-258 }, {  85,-258 }, {  86,-258 }, {  87,-258 },
 {  88,-258 }, {  89,-258 }, {  90,-258 }, {  91,-258 }, {  92,-258 },

 {  93,-258 }, {  94,-258 }, {  95,-258 }, {  96,-258 }, {  97,-258 },
 {  98,-258 }, {  99,-258 }, { 100,-258 }, { 101,-258 }, { 102,-258 },
 { 103,-258 }, { 104,-258 }, { 105,-258 }, { 106,-258 }, { 107,-258 },
 { 108,-258 }, { 109,-258 }, { 110,-258 }, { 111,-258 }, { 112,-258 },
 { 113,-258 }, { 114,-258 }, { 115,-258 }, { 116,-258 }, { 117,-258 },
 { 118,-258 }, { 119,-258 }, { 120,-258 }, { 121,-258 }, { 122,-258 },
 { 123,-258 }, { 124,-258 }, { 125,-258 }, { 126,-258 }, { 127,-258 },
 { 128,-258 }, { 129,-258 }, { 130,-258 }, { 131,-258 }, { 132,-258 },
 { 133,-258 }, { 134,-258 }, { 135,-258 }, { 136,-258 }, { 137,-258 },
 { 138,-258 }, { 139,-258 }, { 140,-258 }, { 141,-258 }, { 142,-258 },

 { 143,-258 }, { 144,-258 }, { 145,-258 }, { 146,-258 }, { 147,-258 },
 { 148,-258 }, { 149,-258 }, { 150,-258 }, { 151,-258 }, { 152,-258 },
 { 153,-258 }, { 154,-258 }, { 155,-258 }, { 156,-258 }, { 157,-258 },
 { 158,-258 }, { 159,-258 }, { 160,-258 }, { 161,-258 }, { 162,-258 },
 { 163,-258 }, { 164,-258 }, { 165,-258 }, { 166,-258 }, { 167,-258 },
 { 168,-258 }, { 169,-258 }, { 170,-258 }, { 171,-258 }, { 172,-258 },
 { 173,-258 }, { 174,-258 }, { 175,-258 }, { 176,-258 }, { 177,-258 },
 { 178,-258 }, { 179,-258 }, { 180,-258 }, { 181,-258 }, { 182,-258 },
 { 183,-258 }, { 184,-258 }, { 185,-258 }, { 186,-258 }, { 187,-258 },
 { 188,-258 }, { 189,-258 }, { 190,-258 }, { 191,-258 }, { 192,-258 },

 { 193,-258 }, { 194,-258 }, { 195,-258 }, { 196,-258 }, { 197,-258 },
 { 198,-258 }, { 199,-258 }, { 200,-258 }, { 201,-258 }, { 202,-258 },
 { 203,-258 }, { 204,-258 }, { 205,-258 }, { 206,-258 }, { 207,-258 },
 { 208,-258 }, { 209,-258 }, { 210,-258 }, { 211,-258 }, { 212,-258 },
 { 213,-258 }, { 214,-258 }, { 215,-258 }, { 216,-258 }, { 217,-258 },
 { 218,-258 }, { 219,-258 }, { 220,-258 }, { 221,-258 }, { 222,-258 },
 { 223,-258 }, { 224,-258 }, { 225,-258 }, { 226,-258 }, { 227,-258 },
 { 228,-258 }, { 229,-258 }, { 230,-258 }, { 231,-258 }, { 232,-258 },
 { 233,-258 }, { 234,-258 }, { 235,-258 }, { 236,-258 }, { 237,-258 },
 { 238,-258 }, { 239,-258 }, { 240,-258 }, { 241,-258 }, { 242,-258 },

 { 243,-258 }, { 244,-258 }, { 245,-258 }, { 246,-258 }, { 247,-258 },
 { 248,-258 }, { 249,-258 }, { 250,-258 }, { 251,-258 }, { 252,-258 },
 { 253,-258 }, { 254,-258 }, { 255,-258 }, { 256,-258 }, {   0,  12 },
 {   0,1806 }, {   1,-516 }, {   2,-516 }, {   3,-516 }, {   4,-516 },
 {   5,-516 }, {   6,-516 }, {   7,-516 }, {   8,-516 }, {   0,   0 },
 {   0,   0 }, {  11,-516 }, {  12,-516 }, {  13,-516 }, {  14,-516 },
 {  15,-516 }, {  16,-516 }, {  17,-516 }, {  18,-516 }, {  19,-516 },
 {  20,-516 }, {  21,-516 }, {  22,-516 }, {  23,-516 }, {  24,-516 },
 {  25,-516 }, {  26,-516 }, {  27,-516 }, {  28,-516 }, {  29,-516 },
 {  30,-516 }, {  31,-516 }, {   0,   0 }, {  33,-516 }, {  34,-516 },

 {  35,-516 }, {  36,-516 }, {  37,-516 }, {  38,-516 }, {  39,-516 },
 {   0,   0 }, {   0,   0 }, {  42,-516 }, {  43,-516 }, {  44,-516 },
 {   0,   0 }, {  46,-516 }, {  47,-516 }, {  48,-516 }, {  49,-516 },
 {  50,-516 }, {  51,-516 }, {  52,-516 }, {  53,-516 }, {  54,-516 },
 {  55,-516 }, {  56,-516 }, {  57,-516 }, {  58,-516 }, {  59,-516 },
 {  60,-516 }, {  61,-516 }, {  62,-516 }, {  63,-516 }, {  64,-516 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },

 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {  91,-516 }, {  92,-516 }, {  93,-516 }, {  94,-516 },
 {  95,-516 }, {  96,-516 }, {  97,-516 }, {  98,-516 }, {  99,-516 },
 { 100,-516 }, { 101,-516 }, { 102,-516 }, { 103,-516 }, { 104,-516 },
 { 105,-516 }, { 106,-516 }, { 107,-516 }, { 108,-516 }, { 109,-516 },
 { 110,-516 }, { 111,-516 }, { 112,-516 }, { 113,-516 }, { 114,-516 },
 { 115,-516 }, { 116,-516 }, { 117,-516 }, { 118,-516 }, { 119,-516 },
 { 120,-516 }, { 121,-516 }, { 122,-516 }, { 123,-516 }, { 124,-516 },
 { 125,-516 }, { 126,-516 }, { 127,-516 }, { 128,-516 }, { 129,-516 },
 { 130,-516 }, { 131,-516 }, { 132,-516 }, { 133,-516 }, { 134,-516 },

 { 135,-516 }, { 136,-516 }, { 137,-516 }, { 138,-516 }, { 139,-516 },
 { 140,-516 }, { 141,-516 }, { 142,-516 }, { 143,-516 }, { 144,-516 },
 { 145,-516 }, { 146,-516 }, { 147,-516 }, { 148,-516 }, { 149,-516 },
 { 150,-516 }, { 151,-516 }, { 152,-516 }, { 153,-516 }, { 154,-516 },
 { 155,-516 }, { 156,-516 }, { 157,-516 }, { 158,-516 }, { 159,-516 },
 { 160,-516 }, { 161,-516 }, { 162,-516 }, { 163,-516 }, { 164,-516 },
 { 165,-516 }, { 166,-516 }, { 167,-516 }, { 168,-516 }, { 169,-516 },
 { 170,-516 }, { 171,-516 }, { 172,-516 }, { 173,-516 }, { 174,-516 },
 { 175,-516 }, { 176,-516 }, { 177,-516 }, { 178,-516 }, { 179,-516 },
 { 180,-516 }, { 181,-516 }, { 182,-516 }, { 183,-516 }, { 184,-516 },

 { 185,-516 }, { 186,-516 }, { 187,-516 }, { 188,-516 }, { 189,-516 },
 { 190,-516 }, { 191,-516 }, { 192,-516 }, { 193,-516 }, { 194,-516 },
 { 195,-516 }, { 196,-516 }, { 197,-516 }, { 198,-516 }, { 199,-516 },
 { 200,-516 }, { 201,-516 }, { 202,-516 }, { 203,-516 }, { 204,-516 },
 { 205,-516 }, { 206,-516 }, { 207,-516 }, { 208,-516 }, { 209,-516 },
 { 210,-516 }, { 211,-516 }, { 212,-516 }, { 213,-516 }, { 214,-516 },
 { 215,-516 }, { 216,-516 }, { 217,-516 }, { 218,-516 }, { 219,-516 },
 { 220,-516 }, { 221,-516 }, { 222,-516 }, { 223,-516 }, { 224,-516 },
 { 225,-516 }, { 226,-516 }, { 227,-516 }, { 228,-516 }, { 229,-516 },
 { 230,-516 }, { 231,-516 }, { 232,-516 }, { 233,-516 }, { 234,-516 },

 { 235,-516 }, { 236,-516 }, { 237,-516 }, { 238,-516 }, { 239,-516 },
 { 240,-516 }, { 241,-516 }, { 242,-516 }, { 243,-516 }, { 244,-516 },
 { 245,-516 }, { 246,-516 }, { 247,-516 }, { 248,-516 }, { 249,-516 },
 { 250,-516 }, { 251,-516 }, { 252,-516 }, { 253,-516 }, { 254,-516 },
 { 255,-516 }, { 256,-516 }, {   0,   9 }, {   0,1548 }, {   1,   0 },
 {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   0,   0 }, {   0,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },

 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {   0,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {   0,   0 }, {   0,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 },
 {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },

 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 },
 {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 },

 { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 },
 { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 },
 { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 },
 { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 },
 { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 },
 { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 },
 { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 },
 { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 },
 { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 },
 { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 },

 { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 },
 { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 },
 { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 },
 { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 },
 { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 },
 { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 },
 { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 },
 { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 },
 { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 },
 { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 },

 { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 },
 { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 },
 { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 },
 { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 },
 { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 },
 { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 }, { 256,   0 },
 {   0,  10 }, {   0,1290 }, {   1,-2446 }, {   2,-2446 }, {   3,-2446 },
 {   4,-2446 }, {   5,-2446 }, {   6,-2446 }, {   7,-2446 }, {   8,-2446 },
 {   0,   0 }, {   0,   0 }, {  11,-2446 }, {  12,-2446 }, {  13,-2446 },
 {  14,-2446 }, {  15,-2446 }, {  16,-2446 }, {  17,-2446 }, {  18,-2446 },

 {  19,-2446 }, {  20,-2446 }, {  21,-2446 }, {  22,-2446 }, {  23,-2446 },
 {  24,-2446 }, {  25,-2446 }, {  26,-2446 }, {  27,-2446 }, {  28,-2446 },
 {  29,-2446 }, {  30,-2446 }, {  31,-2446 }, {   0,   0 }, {  33,-2446 },
 {  34,-2446 }, {  35,-2446 }, {  36,-2446 }, {  37,-2446 }, {  38,-2446 },
 {  39,-2446 }, {   0,   0 }, {   0,   0 }, {  42,-2446 }, {  43,-2446 },
 {  44,-2446 }, {  45,-2446 }, {  46,-2446 }, {  47,-2446 }, {  48,-2446 },
 {  49,-2446 }, {  50,-2446 }, {  51,-2446 }, {  52,-2446 }, {  53,-2446 },
 {  54,-2446 }, {  55,-2446 }, {  56,-2446 }, {  57,-2446 }, {  58,-2446 },
 {  59,-2446 }, {  60,-2446 }, {  61,-2446 }, {  62,-2446 }, {  63,-2446 },
 {  64,-2446 }, {  65,-2446 }, {  66,-2446 }, {  67,-2446 }, {  68,-2446 },

 {  69,-2446 }, {  70,-2446 }, {  71,-2446 }, {  72,-2446 }, {  73,-2446 },
 {  74,-2446 }, {  75,-2446 }, {  76,-2446 }, {  77,-2446 }, {  78, 516 },
 {  79,-2446 }, {  80,-2446 }, {  81,-2446 }, {  82,-2446 }, {  83,-2446 },
 {  84,-2446 }, {  85,-2446 }, {  86,-2446 }, {  87,-2446 }, {  88,-2446 },
 {  89,-2446 }, {  90,-2446 }, {  91,-2446 }, {  92,-2446 }, {  93,-2446 },
 {  94,-2446 }, {  95,-2446 }, {  96,-2446 }, {  97,-2446 }, {  98,-2446 },
 {  99,-2446 }, { 100,-2446 }, { 101,-2446 }, { 102,-2446 }, { 103,-2446 },
 { 104,-2446 }, { 105,-2446 }, { 106,-2446 }, { 107,-2446 }, { 108,-2446 },
 { 109,-2446 }, { 110,-2446 }, { 111,-2446 }, { 112,-2446 }, { 113,-2446 },
 { 114,-2446 }, { 115,-2446 }, { 116,-2446 }, { 117,-2446 }, { 118,-2446 },

 { 119,-2446 }, { 120,-2446 }, { 121,-2446 }, { 122,-2446 }, { 123,-2446 },
 { 124,-2446 }, { 125,-2446 }, { 126,-2446 }, { 127,-2446 }, { 128,-2446 },
 { 129,-2446 }, { 130,-2446 }, { 131,-2446 }, { 132,-2446 }, { 133,-2446 },
 { 134,-2446 }, { 135,-2446 }, { 136,-2446 }, { 137,-2446 }, { 138,-2446 },
 { 139,-2446 }, { 140,-2446 }, { 141,-2446 }, { 142,-2446 }, { 143,-2446 },
 { 144,-2446 }, { 145,-2446 }, { 146,-2446 }, { 147,-2446 }, { 148,-2446 },
 { 149,-2446 }, { 150,-2446 }, { 151,-2446 }, { 152,-2446 }, { 153,-2446 },
 { 154,-2446 }, { 155,-2446 }, { 156,-2446 }, { 157,-2446 }, { 158,-2446 },
 { 159,-2446 }, { 160,-2446 }, { 161,-2446 }, { 162,-2446 }, { 163,-2446 },
 { 164,-2446 }, { 165,-2446 }, { 166,-2446 }, { 167,-2446 }, { 168,-2446 },

 { 169,-2446 }, { 170,-2446 }, { 171,-2446 }, { 172,-2446 }, { 173,-2446 },
 { 174,-2446 }, { 175,-2446 }, { 176,-2446 }, { 177,-2446 }, { 178,-2446 },
 { 179,-2446 }, { 180,-2446 }, { 181,-2446 }, { 182,-2446 }, { 183,-2446 },
 { 184,-2446 }, { 185,-2446 }, { 186,-2446 }, { 187,-2446 }, { 188,-2446 },
 { 189,-2446 }, { 190,-2446 }, { 191,-2446 }, { 192,-2446 }, { 193,-2446 },
 { 194,-2446 }, { 195,-2446 }, { 196,-2446 }, { 197,-2446 }, { 198,-2446 },
 { 199,-2446 }, { 200,-2446 }, { 201,-2446 }, { 202,-2446 }, { 203,-2446 },
 { 204,-2446 }, { 205,-2446 }, { 206,-2446 }, { 207,-2446 }, { 208,-2446 },
 { 209,-2446 }, { 210,-2446 }, { 211,-2446 }, { 212,-2446 }, { 213,-2446 },
 { 214,-2446 }, { 215,-2446 }, { 216,-2446 }, { 217,-2446 }, { 218,-2446 },

 { 219,-2446 }, { 220,-2446 }, { 221,-2446 }, { 222,-2446 }, { 223,-2446 },
 { 224,-2446 }, { 225,-2446 }, { 226,-2446 }, { 227,-2446 }, { 228,-2446 },
 { 229,-2446 }, { 230,-2446 }, { 231,-2446 }, { 232,-2446 }, { 233,-2446 },
 { 234,-2446 }, { 235,-2446 }, { 236,-2446 }, { 237,-2446 }, { 238,-2446 },
 { 239,-2446 }, { 240,-2446 }, { 241,-2446 }, { 242,-2446 }, { 243,-2446 },
 { 244,-2446 }, { 245,-2446 }, { 246,-2446 }, { 247,-2446 }, { 248,-2446 },
 { 249,-2446 }, { 250,-2446 }, { 251,-2446 }, { 252,-2446 }, { 253,-2446 },
 { 254,-2446 }, { 255,-2446 }, { 256,-2446 }, {   0,   9 }, {   0,1032 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   0,   0 }, {   0,   0 },

 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {   0,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {   0,   0 },
 {   0,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },

 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },

 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 },
 { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 },
 { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 },
 { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 },
 { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 },
 { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 },
 { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 },

 { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 },
 { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 },
 { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 },
 { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 },
 { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 },
 { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 },
 { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 },
 { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 },
 { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 },
 { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 },

 { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 },
 { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 },
 { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 },
 { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 },
 { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 },
 { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 },
 { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 },
 { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 },
 { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 },
 { 256,   0 }, {   0,  10 }, {   0, 774 }, {   1,-2962 }, {   2,-2962 },

 {   3,-2962 }, {   4,-2962 }, {   5,-2962 }, {   6,-2962 }, {   7,-2962 },
 {   8,-2962 }, {   0,   0 }, {   0,   0 }, {  11,-2962 }, {  12,-2962 },
 {  13,-2962 }, {  14,-2962 }, {  15,-2962 }, {  16,-2962 }, {  17,-2962 },
 {  18,-2962 }, {  19,-2962 }, {  20,-2962 }, {  21,-2962 }, {  22,-2962 },
 {  23,-2962 }, {  24,-2962 }, {  25,-2962 }, {  26,-2962 }, {  27,-2962 },
 {  28,-2962 }, {  29,-2962 }, {  30,-2962 }, {  31,-2962 }, {   0,   0 },
 {  33,-2962 }, {  34,-2962 }, {  35,-2962 }, {  36,-2962 }, {  37,-2962 },
 {  38,-2962 }, {  39,-2962 }, {   0,   0 }, {   0,   0 }, {  42,-2962 },
 {  43,-2962 }, {  44,-2962 }, {  45,-2962 }, {  46,-2962 }, {  47,-2962 },
 {  48,-2962 }, {  49,-2962 }, {  50,-2962 }, {  51,-2962 }, {  52,-2962 },

 {  53,-2962 }, {  54,-2962 }, {  55,-2962 }, {  56,-2962 }, {  57,-2962 },
 {  58,-2962 }, {  59,-2962 }, {  60,-2962 }, {  61,-2962 }, {  62,-2962 },
 {  63,-2962 }, {  64,-2962 }, {  65,-2962 }, {  66,-2962 }, {  67,-2962 },
 {  68,-2962 }, {  69, 258 }, {  70,-2962 }, {  71,-2962 }, {  72,-2962 },
 {  73,-2962 }, {  74,-2962 }, {  75,-2962 }, {  76,-2962 }, {  77,-2962 },
 {  78,-2962 }, {  79,-2962 }, {  80,-2962 }, {  81,-2962 }, {  82,-2962 },
 {  83,-2962 }, {  84,-2962 }, {  85,-2962 }, {  86,-2962 }, {  87,-2962 },
 {  88,-2962 }, {  89,-2962 }, {  90,-2962 }, {  91,-2962 }, {  92,-2962 },
 {  93,-2962 }, {  94,-2962 }, {  95,-2962 }, {  96,-2962 }, {  97,-2962 },
 {  98,-2962 }, {  99,-2962 }, { 100,-2962 }, { 101,-2962 }, { 102,-2962 },

 { 103,-2962 }, { 104,-2962 }, { 105,-2962 }, { 106,-2962 }, { 107,-2962 },
 { 108,-2962 }, { 109,-2962 }, { 110,-2962 }, { 111,-2962 }, { 112,-2962 },
 { 113,-2962 }, { 114,-2962 }, { 115,-2962 }, { 116,-2962 }, { 117,-2962 },
 { 118,-2962 }, { 119,-2962 }, { 120,-2962 }, { 121,-2962 }, { 122,-2962 },
 { 123,-2962 }, { 124,-2962 }, { 125,-2962 }, { 126,-2962 }, { 127,-2962 },
 { 128,-2962 }, { 129,-2962 }, { 130,-2962 }, { 131,-2962 }, { 132,-2962 },
 { 133,-2962 }, { 134,-2962 }, { 135,-2962 }, { 136,-2962 }, { 137,-2962 },
 { 138,-2962 }, { 139,-2962 }, { 140,-2962 }, { 141,-2962 }, { 142,-2962 },
 { 143,-2962 }, { 144,-2962 }, { 145,-2962 }, { 146,-2962 }, { 147,-2962 },
 { 148,-2962 }, { 149,-2962 }, { 150,-2962 }, { 151,-2962 }, { 152,-2962 },

 { 153,-2962 }, { 154,-2962 }, { 155,-2962 }, { 156,-2962 }, { 157,-2962 },
 { 158,-2962 }, { 159,-2962 }, { 160,-2962 }, { 161,-2962 }, { 162,-2962 },
 { 163,-2962 }, { 164,-2962 }, { 165,-2962 }, { 166,-2962 }, { 167,-2962 },
 { 168,-2962 }, { 169,-2962 }, { 170,-2962 }, { 171,-2962 }, { 172,-2962 },
 { 173,-2962 }, { 174,-2962 }, { 175,-2962 }, { 176,-2962 }, { 177,-2962 },
 { 178,-2962 }, { 179,-2962 }, { 180,-2962 }, { 181,-2962 }, { 182,-2962 },
 { 183,-2962 }, { 184,-2962 }, { 185,-2962 }, { 186,-2962 }, { 187,-2962 },
 { 188,-2962 }, { 189,-2962 }, { 190,-2962 }, { 191,-2962 }, { 192,-2962 },
 { 193,-2962 }, { 194,-2962 }, { 195,-2962 }, { 196,-2962 }, { 197,-2962 },
 { 198,-2962 }, { 199,-2962 }, { 200,-2962 }, { 201,-2962 }, { 202,-2962 },

 { 203,-2962 }, { 204,-2962 }, { 205,-2962 }, { 206,-2962 }, { 207,-2962 },
 { 208,-2962 }, { 209,-2962 }, { 210,-2962 }, { 211,-2962 }, { 212,-2962 },
 { 213,-2962 }, { 214,-2962 }, { 215,-2962 }, { 216,-2962 }, { 217,-2962 },
 { 218,-2962 }, { 219,-2962 }, { 220,-2962 }, { 221,-2962 }, { 222,-2962 },
 { 223,-2962 }, { 224,-2962 }, { 225,-2962 }, { 226,-2962 }, { 227,-2962 },
 { 228,-2962 }, { 229,-2962 }, { 230,-2962 }, { 231,-2962 }, { 232,-2962 },
 { 233,-2962 }, { 234,-2962 }, { 235,-2962 }, { 236,-2962 }, { 237,-2962 },
 { 238,-2962 }, { 239,-2962 }, { 240,-2962 }, { 241,-2962 }, { 242,-2962 },
 { 243,-2962 }, { 244,-2962 }, { 245,-2962 }, { 246,-2962 }, { 247,-2962 },
 { 248,-2962 }, { 249,-2962 }, { 250,-2962 }, { 251,-2962 }, { 252,-2962 },

 { 253,-2962 }, { 254,-2962 }, { 255,-2962 }, { 256,-2962 }, {   0,  10 },
 {   0, 516 }, {   1,-3220 }, {   2,-3220 }, {   3,-3220 }, {   4,-3220 },
 {   5,-3220 }, {   6,-3220 }, {   7,-3220 }, {   8,-3220 }, {   0,   0 },
 {   0,   0 }, {  11,-3220 }, {  12,-3220 }, {  13,-3220 }, {  14,-3220 },
 {  15,-3220 }, {  16,-3220 }, {  17,-3220 }, {  18,-3220 }, {  19,-3220 },
 {  20,-3220 }, {  21,-3220 }, {  22,-3220 }, {  23,-3220 }, {  24,-3220 },
 {  25,-3220 }, {  26,-3220 }, {  27,-3220 }, {  28,-3220 }, {  29,-3220 },
 {  30,-3220 }, {  31,-3220 }, {   0,   0 }, {  33,-3220 }, {  34,-3220 },
 {  35,-3220 }, {  36,-3220 }, {  37,-3220 }, {  38,-3220 }, {  39,-3220 },
 {   0,   0 }, {   0,   0 }, {  42,-3220 }, {  43,-3220 }, {  44,-3220 },

 {  45, 258 }, {  46,-3220 }, {  47,-3220 }, {  48,-3220 }, {  49,-3220 },
 {  50,-3220 }, {  51,-3220 }, {  52,-3220 }, {  53,-3220 }, {  54,-3220 },
 {  55,-3220 }, {  56,-3220 }, {  57,-3220 }, {  58,-3220 }, {  59,-3220 },
 {  60,-3220 }, {  61,-3220 }, {  62,-3220 }, {  63,-3220 }, {  64,-3220 },
 {  65,-3220 }, {  66,-3220 }, {  67,-3220 }, {  68,-3220 }, {  69,-3220 },
 {  70,-3220 }, {  71,-3220 }, {  72,-3220 }, {  73,-3220 }, {  74,-3220 },
 {  75,-3220 }, {  76,-3220 }, {  77,-3220 }, {  78,-3220 }, {  79,-3220 },
 {  80,-3220 }, {  81,-3220 }, {  82,-3220 }, {  83,-3220 }, {  84,-3220 },
 {  85,-3220 }, {  86,-3220 }, {  87,-3220 }, {  88,-3220 }, {  89,-3220 },
 {  90,-3220 }, {  91,-3220 }, {  92,-3220 }, {  93,-3220 }, {  94,-3220 },

 {  95,-3220 }, {  96,-3220 }, {  97,-3220 }, {  98,-3220 }, {  99,-3220 },
 { 100,-3220 }, { 101,-3220 }, { 102,-3220 }, { 103,-3220 }, { 104,-3220 },
 { 105,-3220 }, { 106,-3220 }, { 107,-3220 }, { 108,-3220 }, { 109,-3220 },
 { 110,-3220 }, { 111,-3220 }, { 112,-3220 }, { 113,-3220 }, { 114,-3220 },
 { 115,-3220 }, { 116,-3220 }, { 117,-3220 }, { 118,-3220 }, { 119,-3220 },
 { 120,-3220 }, { 121,-3220 }, { 122,-3220 }, { 123,-3220 }, { 124,-3220 },
 { 125,-3220 }, { 126,-3220 }, { 127,-3220 }, { 128,-3220 }, { 129,-3220 },
 { 130,-3220 }, { 131,-3220 }, { 132,-3220 }, { 133,-3220 }, { 134,-3220 },
 { 135,-3220 }, { 136,-3220 }, { 137,-3220 }, { 138,-3220 }, { 139,-3220 },
 { 140,-3220 }, { 141,-3220 }, { 142,-3220 }, { 143,-3220 }, { 144,-3220 },

 { 145,-3220 }, { 146,-3220 }, { 147,-3220 }, { 148,-3220 }, { 149,-3220 },
 { 150,-3220 }, { 151,-3220 }, { 152,-3220 }, { 153,-3220 }, { 154,-3220 },
 { 155,-3220 }, { 156,-3220 }, { 157,-3220 }, { 158,-3220 }, { 159,-3220 },
 { 160,-3220 }, { 161,-3220 }, { 162,-3220 }, { 163,-3220 }, { 164,-3220 },
 { 165,-3220 }, { 166,-3220 }, { 167,-3220 }, { 168,-3220 }, { 169,-3220 },
 { 170,-3220 }, { 171,-3220 }, { 172,-3220 }, { 173,-3220 }, { 174,-3220 },
 { 175,-3220 }, { 176,-3220 }, { 177,-3220 }, { 178,-3220 }, { 179,-3220 },
 { 180,-3220 }, { 181,-3220 }, { 182,-3220 }, { 183,-3220 }, { 184,-3220 },
 { 185,-3220 }, { 186,-3220 }, { 187,-3220 }, { 188,-3220 }, { 189,-3220 },
 { 190,-3220 }, { 191,-3220 }, { 192,-3220 }, { 193,-3220 }, { 194,-3220 },

 { 195,-3220 }, { 196,-3220 }, { 197,-3220 }, { 198,-3220 }, { 199,-3220 },
 { 200,-3220 }, { 201,-3220 }, { 202,-3220 }, { 203,-3220 }, { 204,-3220 },
 { 205,-3220 }, { 206,-3220 }, { 207,-3220 }, { 208,-3220 }, { 209,-3220 },
 { 210,-3220 }, { 211,-3220 }, { 212,-3220 }, { 213,-3220 }, { 214,-3220 },
 { 215,-3220 }, { 216,-3220 }, { 217,-3220 }, { 218,-3220 }, { 219,-3220 },
 { 220,-3220 }, { 221,-3220 }, { 222,-3220 }, { 223,-3220 }, { 224,-3220 },
 { 225,-3220 }, { 226,-3220 }, { 227,-3220 }, { 228,-3220 }, { 229,-3220 },
 { 230,-3220 }, { 231,-3220 }, { 232,-3220 }, { 233,-3220 }, { 234,-3220 },
 { 235,-3220 }, { 236,-3220 }, { 237,-3220 }, { 238,-3220 }, { 239,-3220 },
 { 240,-3220 }, { 241,-3220 }, { 242,-3220 }, { 243,-3220 }, { 244,-3220 },

 { 245,-3220 }, { 246,-3220 }, { 247,-3220 }, { 248,-3220 }, { 249,-3220 },
 { 250,-3220 }, { 251,-3220 }, { 252,-3220 }, { 253,-3220 }, { 254,-3220 },
 { 255,-3220 }, { 256,-3220 }, {   0,   8 }, {   0, 258 }, {   1,-3478 },
 {   2,-3478 }, {   3,-3478 }, {   4,-3478 }, {   5,-3478 }, {   6,-3478 },
 {   7,-3478 }, {   8,-3478 }, {   0,   0 }, {   0,   0 }, {  11,-3478 },
 {  12,-3478 }, {  13,-3478 }, {  14,-3478 }, {  15,-3478 }, {  16,-3478 },
 {  17,-3478 }, {  18,-3478 }, {  19,-3478 }, {  20,-3478 }, {  21,-3478 },
 {  22,-3478 }, {  23,-3478 }, {  24,-3478 }, {  25,-3478 }, {  26,-3478 },
 {  27,-3478 }, {  28,-3478 }, {  29,-3478 }, {  30,-3478 }, {  31,-3478 },
 {   0,   0 }, {  33,-3478 }, {  34,-3478 }, {  35,-3478 }, {  36,-3478 },

 {  37,-3478 }, {  38,-3478 }, {  39,-3478 }, {   0,   0 }, {   0,   0 },
 {  42,-3478 }, {  43,-3478 }, {  44,-3478 }, {  45,-3478 }, {  46,-3478 },
 {  47,-3478 }, {  48,-3478 }, {  49,-3478 }, {  50,-3478 }, {  51,-3478 },
 {  52,-3478 }, {  53,-3478 }, {  54,-3478 }, {  55,-3478 }, {  56,-3478 },
 {  57,-3478 }, {  58,-3478 }, {  59,-3478 }, {  60,-3478 }, {  61,-3478 },
 {  62,-3478 }, {  63,-3478 }, {  64,-3478 }, {  65,-3478 }, {  66,-3478 },
 {  67,-3478 }, {  68,-3478 }, {  69,-3478 }, {  70,-3478 }, {  71,-3478 },
 {  72,-3478 }, {  73,-3478 }, {  74,-3478 }, {  75,-3478 }, {  76,-3478 },
 {  77,-3478 }, {  78,-3478 }, {  79,-3478 }, {  80,-3478 }, {  81,-3478 },
 {  82,-3478 }, {  83,-3478 }, {  84,-3478 }, {  85,-3478 }, {  86,-3478 },

 {  87,-3478 }, {  88,-3478 }, {  89,-3478 }, {  90,-3478 }, {  91,-3478 },
 {  92,-3478 }, {  93,-3478 }, {  94,-3478 }, {  95,-3478 }, {  96,-3478 },
 {  97,-3478 }, {  98,-3478 }, {  99,-3478 }, { 100,-3478 }, { 101,-3478 },
 { 102,-3478 }, { 103,-3478 }, { 104,-3478 }, { 105,-3478 }, { 106,-3478 },
 { 107,-3478 }, { 108,-3478 }, { 109,-3478 }, { 110,-3478 }, { 111,-3478 },
 { 112,-3478 }, { 113,-3478 }, { 114,-3478 }, { 115,-3478 }, { 116,-3478 },
 { 117,-3478 }, { 118,-3478 }, { 119,-3478 }, { 120,-3478 }, { 121,-3478 },
 { 122,-3478 }, { 123,-3478 }, { 124,-3478 }, { 125,-3478 }, { 126,-3478 },
 { 127,-3478 }, { 128,-3478 }, { 129,-3478 }, { 130,-3478 }, { 131,-3478 },
 { 132,-3478 }, { 133,-3478 }, { 134,-3478 }, { 135,-3478 }, { 136,-3478 },

 { 137,-3478 }, { 138,-3478 }, { 139,-3478 }, { 140,-3478 }, { 141,-3478 },
 { 142,-3478 }, { 143,-3478 }, { 144,-3478 }, { 145,-3478 }, { 146,-3478 },
 { 147,-3478 }, { 148,-3478 }, { 149,-3478 }, { 150,-3478 }, { 151,-3478 },
 { 152,-3478 }, { 153,-3478 }, { 154,-3478 }, { 155,-3478 }, { 156,-3478 },
 { 157,-3478 }, { 158,-3478 }, { 159,-3478 }, { 160,-3478 }, { 161,-3478 },
 { 162,-3478 }, { 163,-3478 }, { 164,-3478 }, { 165,-3478 }, { 166,-3478 },
 { 167,-3478 }, { 168,-3478 }, { 169,-3478 }, { 170,-3478 }, { 171,-3478 },
 { 172,-3478 }, { 173,-3478 }, { 174,-3478 }, { 175,-3478 }, { 176,-3478 },
 { 177,-3478 }, { 178,-3478 }, { 179,-3478 }, { 180,-3478 }, { 181,-3478 },
 { 182,-3478 }, { 183,-3478 }, { 184,-3478 }, { 185,-3478 }, { 186,-3478 },

 { 187,-3478 }, { 188,-3478 }, { 189,-3478 }, { 190,-3478 }, { 191,-3478 },
 { 192,-3478 }, { 193,-3478 }, { 194,-3478 }, { 195,-3478 }, { 196,-3478 },
 { 197,-3478 }, { 198,-3478 }, { 199,-3478 }, { 200,-3478 }, { 201,-3478 },
 { 202,-3478 }, { 203,-3478 }, { 204,-3478 }, { 205,-3478 }, { 206,-3478 },
 { 207,-3478 }, { 208,-3478 }, { 209,-3478 }, { 210,-3478 }, { 211,-3478 },
 { 212,-3478 }, { 213,-3478 }, { 214,-3478 }, { 215,-3478 }, { 216,-3478 },
 { 217,-3478 }, { 218,-3478 }, { 219,-3478 }, { 220,-3478 }, { 221,-3478 },
 { 222,-3478 }, { 223,-3478 }, { 224,-3478 }, { 225,-3478 }, { 226,-3478 },
 { 227,-3478 }, { 228,-3478 }, { 229,-3478 }, { 230,-3478 }, { 231,-3478 },
 { 232,-3478 }, { 233,-3478 }, { 234,-3478 }, { 235,-3478 }, { 236,-3478 },

 { 237,-3478 }, { 238,-3478 }, { 239,-3478 }, { 240,-3478 }, { 241,-3478 },
 { 242,-3478 }, { 243,-3478 }, { 244,-3478 }, { 245,-3478 }, { 246,-3478 },
 { 247,-3478 }, { 248,-3478 }, { 249,-3478 }, { 250,-3478 }, { 251,-3478 },
 { 252,-3478 }, { 253,-3478 }, { 254,-3478 }, { 255,-3478 }, { 256,-3478 },
 { 257,  19 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[17] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],
    &yy_transition[1035],
    &yy_transition[1293],
    &yy_transition[1551],
    &yy_transition[1809],
    &yy_transition[2067],
    &yy_transition[2325],
    &yy_transition[2583],
    &yy_transition[2841],
    &yy_transition[3099],
    &yy_transition[3357],
    &yy_transition[3615],
    &yy_transition[3873],

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int readtree_flex_debug;
int readtree_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *readtreetext;
#line 1 "second-stage/programs/features/read-tree.l"
/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/* read-tree.l
 *
 * (c) Mark Johnson, 7th March 2004, modified 21st October 2004 to read null category label
 * modified 2nd March 2005 to accept 8-bit characters
 */
#line 27 "second-stage/programs/features/read-tree.l"
#include "custom_allocator.h"   // must be first

#include "sym.h"
#include "tree.h"

#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <stack>

int readtree_lineno = 1;
const char* readtree_filename = NULL;

static const symbol empty_symbol("");

inline static void message(const char* s1, const char* s2) {
  fprintf(stderr, "%s:%d: %s %s\n", readtree_filename, readtree_lineno, s1, s2);
}

inline static void downcase(char *s) {
  assert(s != NULL);
  while (*s != '\0') {
    if (isupper(*s))
      *s = tolower(*s);
    ++s;
  }
}

#define YY_DECL static tree* readtree_lex(bool downcase_flag = false)

/* RT  - PTB-style tree root with no label
 * RTC - tree root (with label)
 * FC  - first child subtree or terminal
 * NC  - next child
 * CAT - category from label
 * PC -  post-category junk in label
 * IND - index in label
 */







#line 2668 "second-stage/programs/features/read-tree.cc"

#define INITIAL 0
#define RT 1
#define RTC 2
#define FC 3
#define NC 4
#define CAT 5
#define PC 6
#define IND 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int readtreelex_destroy (void );

int readtreeget_debug (void );

void readtreeset_debug (int debug_flag  );

YY_EXTRA_TYPE readtreeget_extra (void );

void readtreeset_extra (YY_EXTRA_TYPE user_defined  );

FILE *readtreeget_in (void );

void readtreeset_in  (FILE * in_str  );

FILE *readtreeget_out (void );

void readtreeset_out  (FILE * out_str  );

int readtreeget_leng (void );

char *readtreeget_text (void );

int readtreeget_lineno (void );

void readtreeset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int readtreewrap (void );
#else
extern int readtreewrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( readtreetext, readtreeleng, 1, readtreeout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(readtreein), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(readtreein); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int readtreelex (void);

#define YY_DECL int readtreelex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after readtreetext and readtreeleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 77 "second-stage/programs/features/read-tree.l"



  tree* root = NULL;    /* tree's root node */
  std::stack<tree*> s;  /* stack of tree node ptrs */


#line 2854 "second-stage/programs/features/read-tree.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! readtreein )
			readtreein = stdin;

		if ( ! readtreeout )
			readtreeout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			readtreeensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				readtree_create_buffer(readtreein,YY_BUF_SIZE );
		}

		readtree_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of readtreetext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[(yy_start)];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 84 "second-stage/programs/features/read-tree.l"
assert(s.empty()); s.push(root = new tree); s.top()->label.cat = tree::label_type::root(); BEGIN(FC); 
	YY_BREAK
case YY_STATE_EOF(RT):
#line 85 "second-stage/programs/features/read-tree.l"
assert(s.empty()); return NULL;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 87 "second-stage/programs/features/read-tree.l"
assert(s.empty()); s.push(root = new tree); BEGIN(CAT);
	YY_BREAK
case YY_STATE_EOF(RTC):
#line 88 "second-stage/programs/features/read-tree.l"
assert(s.empty()); return NULL;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 90 "second-stage/programs/features/read-tree.l"
assert(!s.empty()); s.push(s.top()->child = new tree); BEGIN(CAT); 
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 91 "second-stage/programs/features/read-tree.l"
{ assert(!s.empty()); s.push(s.top()->child = new tree); 
                          if (downcase_flag)
			   downcase(readtreetext);
			  s.top()->label.cat = symbol(readtreetext); 
			  BEGIN(NC);
                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "second-stage/programs/features/read-tree.l"
assert(!s.empty()); s.pop(); if (s.size() == 1) return root; BEGIN(NC);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 99 "second-stage/programs/features/read-tree.l"
assert(!s.empty()); s.pop(); if (s.size() == 1) return root;  
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 100 "second-stage/programs/features/read-tree.l"
assert(!s.empty()); s.top() = s.top()->next = new tree; BEGIN(CAT); 
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 102 "second-stage/programs/features/read-tree.l"
{ assert(!s.empty());  
                          s.top()->label.cat = symbol(readtreetext);
			  s.push(s.top()->child = new tree);
                         }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 106 "second-stage/programs/features/read-tree.l"
assert(!s.empty()); s.top()->label.cat = symbol(readtreetext); BEGIN(PC); /* lenorah: add a-z to handle CTB5 functag *pro* */ 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "second-stage/programs/features/read-tree.l"
assert(!s.empty()); s.top()->label.cat = symbol(readtreetext); BEGIN(PC);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 109 "second-stage/programs/features/read-tree.l"
/* ignore index tag */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 110 "second-stage/programs/features/read-tree.l"
/* ignore GF tag */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "second-stage/programs/features/read-tree.l"
/* ignore other tags */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 112 "second-stage/programs/features/read-tree.l"
unput(readtreetext[0]); BEGIN(FC);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "second-stage/programs/features/read-tree.l"
/* ignore spaces */
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 115 "second-stage/programs/features/read-tree.l"
++readtree_lineno;   /* increment line count */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 116 "second-stage/programs/features/read-tree.l"
message("Unexpected character", readtreetext); std::cerr << "Parse tree so far: " << root << '\n' << std::endl; exit(EXIT_FAILURE);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 118 "second-stage/programs/features/read-tree.l"
ECHO;
	YY_BREAK
#line 3039 "second-stage/programs/features/read-tree.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FC):
case YY_STATE_EOF(NC):
case YY_STATE_EOF(CAT):
case YY_STATE_EOF(PC):
case YY_STATE_EOF(IND):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed readtreein at a new source and called
			 * readtreelex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = readtreein;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( readtreewrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * readtreetext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of readtreelex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					readtreerealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			readtreerestart(readtreein  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) readtreerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = yy_start_state_list[(yy_start)];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register int yy_c = 256;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up readtreetext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					readtreerestart(readtreein );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( readtreewrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve readtreetext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void readtreerestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        readtreeensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            readtree_create_buffer(readtreein,YY_BUF_SIZE );
	}

	readtree_init_buffer(YY_CURRENT_BUFFER,input_file );
	readtree_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void readtree_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		readtreepop_buffer_state();
	 *		readtreepush_buffer_state(new_buffer);
     */
	readtreeensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	readtree_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (readtreewrap()) processing, but the only time this flag
	 * is looked at is after readtreewrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void readtree_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	readtreein = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE readtree_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) readtreealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in readtree_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) readtreealloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in readtree_create_buffer()" );

	b->yy_is_our_buffer = 1;

	readtree_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with readtree_create_buffer()
 * 
 */
    void readtree_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		readtreefree((void *) b->yy_ch_buf  );

	readtreefree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a readtreerestart() or at EOF.
 */
    static void readtree_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	readtree_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then readtree_init_buffer was _probably_
     * called from readtreerestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void readtree_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		readtree_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void readtreepush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	readtreeensure_buffer_stack();

	/* This block is copied from readtree_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from readtree_switch_to_buffer. */
	readtree_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void readtreepop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	readtree_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		readtree_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void readtreeensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)readtreealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in readtreeensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)readtreerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in readtreeensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE readtree_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) readtreealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in readtree_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	readtree_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to readtreelex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       readtree_scan_bytes() instead.
 */
YY_BUFFER_STATE readtree_scan_string (yyconst char * yystr )
{
    
	return readtree_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to readtreelex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE readtree_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) readtreealloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in readtree_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = readtree_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in readtree_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up readtreetext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		readtreetext[readtreeleng] = (yy_hold_char); \
		(yy_c_buf_p) = readtreetext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		readtreeleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int readtreeget_lineno  (void)
{
        
    return readtreelineno;
}

/** Get the input stream.
 * 
 */
FILE *readtreeget_in  (void)
{
        return readtreein;
}

/** Get the output stream.
 * 
 */
FILE *readtreeget_out  (void)
{
        return readtreeout;
}

/** Get the length of the current token.
 * 
 */
int readtreeget_leng  (void)
{
        return readtreeleng;
}

/** Get the current token.
 * 
 */

char *readtreeget_text  (void)
{
        return readtreetext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void readtreeset_lineno (int  line_number )
{
    
    readtreelineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see readtree_switch_to_buffer
 */
void readtreeset_in (FILE *  in_str )
{
        readtreein = in_str ;
}

void readtreeset_out (FILE *  out_str )
{
        readtreeout = out_str ;
}

int readtreeget_debug  (void)
{
        return readtree_flex_debug;
}

void readtreeset_debug (int  bdebug )
{
        readtree_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from readtreelex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    readtreein = stdin;
    readtreeout = stdout;
#else
    readtreein = (FILE *) 0;
    readtreeout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * readtreelex_init()
     */
    return 0;
}

/* readtreelex_destroy is for both reentrant and non-reentrant scanners. */
int readtreelex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		readtree_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		readtreepop_buffer_state();
	}

	/* Destroy the stack itself. */
	readtreefree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * readtreelex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *readtreealloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *readtreerealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void readtreefree (void * ptr )
{
	free( (char *) ptr );	/* see readtreerealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 118 "second-stage/programs/features/read-tree.l"



tree* readtree_root(FILE* fp, bool downcase_flag)
{
  readtreein = fp;
  BEGIN(RT);
  return readtree_lex(downcase_flag);
}

tree* readtree(FILE* fp, bool downcase_flag)
{
  readtreein = fp;
  BEGIN(RTC);
  return readtree_lex(downcase_flag);
}

tree* readtree_root(const char* str, bool downcase_flag)
{
  readtree_lineno = 1;
  readtree_filename = str;
  YY_BUFFER_STATE buf = readtree_scan_string(str);
  BEGIN(RT);
  tree* t = readtree_lex(downcase_flag);
  readtree_delete_buffer(buf);
  readtree_filename = NULL;
  return t;
}

tree* readtree(const char* str, bool downcase_flag)
{
  readtree_lineno = 1;
  readtree_filename = str;
  YY_BUFFER_STATE buf = readtree_scan_string(str);
  BEGIN(RTC);
  tree* t = readtree_lex(downcase_flag);
  readtree_delete_buffer(buf);
  readtree_filename = NULL;
  return t;
}

